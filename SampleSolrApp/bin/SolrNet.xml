<?xml version="1.0"?>
<doc>
  <assembly>
    <name>SolrNet</name>
  </assembly>
  <members>
    <member name="T:SolrNet.ISolrQuery">
      <summary>
            Base query interface
            </summary>
    </member>
    <member name="T:SolrNet.AbstractSolrQuery">
      <summary>
            Abstract Solr query, used to define operator overloading
            </summary>
    </member>
    <member name="M:SolrNet.AbstractSolrQuery.Not">
      <summary>
            Negates this query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.AbstractSolrQuery.Required">
      <summary>
            Negates this query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.AbstractSolrQuery.Boost(System.Double)">
      <summary>
            Boosts this query
            </summary>
      <param name="factor">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Cluster">
      <summary>
            Document cluster
            </summary>
    </member>
    <member name="P:SolrNet.Cluster.Label">
      <summary>
            Cluster label
            </summary>
    </member>
    <member name="P:SolrNet.Cluster.Score">
      <summary>
            Cluster score
            </summary>
    </member>
    <member name="P:SolrNet.Cluster.Documents">
      <summary>
            List of the documents by id that are in the cluster
            </summary>
    </member>
    <member name="T:SolrNet.ClusterResults">
      <summary>
            Cluster results
            </summary>
    </member>
    <member name="M:SolrNet.ClusterResults.#ctor">
      <summary>
            Cluster results
            </summary>
    </member>
    <member name="P:SolrNet.ClusterResults.Clusters">
      <summary>
            List of the clusters returned
            </summary>
    </member>
    <member name="T:SolrNet.CollapseExpandResults`1">
      <summary>
            Collapse/expand results model
            </summary>
    </member>
    <member name="M:SolrNet.CollapseExpandResults`1.#ctor(System.Collections.Generic.ICollection{SolrNet.Group{`0}})">
      <summary>
            Constructor for CollapseExpandResults
            </summary>
    </member>
    <member name="P:SolrNet.CollapseExpandResults`1.Groups">
      <summary>
            Grouped documents 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CollapseExpandParameters">
      <summary>
            Parameters for CollapsingQParserPlugin / ExpandComponent
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CollapseExpandParameters.NullPolicyType">
      <summary>
            Determines how to treat nulls while collapsing
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseExpandParameters.NullPolicyType.Policy">
      <summary>
            Determines how to treat nulls while collapsing
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.CollapseExpandParameters.#ctor(System.String,SolrNet.Commands.Parameters.ExpandParameters,SolrNet.Commands.Parameters.CollapseExpandParameters.MinOrMax,SolrNet.Commands.Parameters.CollapseExpandParameters.NullPolicyType)">
      <summary>
            Parameters for CollapsingQParserPlugin / ExpandComponent
            </summary>
      <param name="field">Field to collapse</param>
      <param name="expand">
      </param>
      <param name="minOrMaxField">
      </param>
      <param name="nullPolicy">
      </param>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseExpandParameters.Field">
      <summary>
            Field to group results by
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseExpandParameters.Expand">
      <summary>
            Used to expand the results.
            Null if expansion is not requested.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseExpandParameters.MinOrMaxField">
      <summary>
            Field or function to use for min/max collapsing
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseExpandParameters.NullPolicy">
      <summary>
            Determines how to treat nulls while collapsing
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.ExpandParameters">
      <summary>
            ExpandComponent parameters
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.ExpandParameters.#ctor(SolrNet.SortOrder,System.Nullable{System.Int32},SolrNet.ISolrQuery,SolrNet.ISolrQuery)">
      <summary>
            ExpandComponent parameters
            </summary>
      <param name="sort">Orders the documents with the expanded groups. By default: score desc</param>
      <param name="rows">The number of rows to display in each group. By default: 5</param>
      <param name="query">(Optional) Overrides the main q parameter, determines which documents to include in the main group.</param>
      <param name="filterQuery">(Optional) Overrides main fq, determines which documents to include in the main group.</param>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ExpandParameters.Sort">
      <summary>
            Orders the documents with the expanded groups.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ExpandParameters.Rows">
      <summary>
            The number of rows to display in each group.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ExpandParameters.Query">
      <summary>
            Overrides the main q parameter, determines which documents to include in the main group.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ExpandParameters.FilterQuery">
      <summary>
            Overrides main fq's, determines which documents to include in the main group.
            </summary>
    </member>
    <member name="T:SolrNet.ISolrCommand">
      <summary>
            Command interface
            </summary>
    </member>
    <member name="M:SolrNet.ISolrCommand.Execute(SolrNet.ISolrConnection)">
      <summary>
            Executes this command
            </summary>
      <param name="connection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Commands.ReplicationCommand">
      <summary>
            Replication command
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="F:SolrNet.Commands.ReplicationCommand.Parameters">
      <summary>
            List of Parameters that will be sent to the /replication handler.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.ReplicationCommand.Execute(SolrNet.ISolrConnection)">
      <summary>
            Executes a Replication command
            </summary>
      <param name="connection">The SolrConnection to use.</param>
      <returns>The results of the Command.</returns>
    </member>
    <member name="M:SolrNet.Commands.ReplicationCommand.AddParameter(System.String,System.String)">
      <summary>
            Adds the specified parameter to the current command.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:SolrNet.Commands.Replication.AbortFetchCommand">
      <summary>
            Abort copying index from master to slave command.
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.AbortFetchCommand.#ctor">
      <summary>
            Aborts copying an index from a master to the specified slave.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.DetailsCommand">
      <summary>
            Get all the details of the configuration and current status
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.DetailsCommand.#ctor">
      <summary>
            Retrieves configuration details and current status. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.FetchIndexCommand">
      <summary>
            Force a fetchindex on slave from master command
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.FetchIndexCommand.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Forces the specified slave to fetch a copy of the index from its master. If you like, you 
            can pass an extra attribute such as masterUrl or compression (or any other parameter which 
            is specified in the <lst name="slave" /> tag) to do a one time replication from a master. 
            This obviates the need for hard-coding the master in the slave. 
            </summary>
      <param name="parameters">Optional parameters</param>
    </member>
    <member name="T:SolrNet.Commands.Replication.DisablePollCommand">
      <summary>
            Disable polling for changes from slave command
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.DisablePollCommand.#ctor">
      <summary>
            Disables the specified slave from polling for changes on the master. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.EnablePollCommand">
      <summary>
            Enable polling for changes from slave command
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.EnablePollCommand.#ctor">
      <summary>
            Enables the specified slave to poll for changes on the master. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.EnableReplicationCommand">
      <summary>
            Enable replication on master for all slaves
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.EnableReplicationCommand.#ctor">
      <summary>
            Enables replication on the master for all its slaves. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.DisableReplicationCommand">
      <summary>
            Disable replication on master for all slaves
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.DisableReplicationCommand.#ctor">
      <summary>
            Disables replication on the master for all its slaves. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Replication.IndexVersionCommand">
      <summary>
            Get version number of the index.
            http://wiki.apache.org/solr/SolrReplication
            https://cwiki.apache.org/confluence/display/solr/Index+Replication
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Replication.IndexVersionCommand.#ctor">
      <summary>
            Returns the version of the latest replicatable index on the specified master or slave. 
            </summary>
    </member>
    <member name="F:SolrNet.Commands.CoreCommand.Parameters">
      <summary>
            List of Parameters that will be sent to the /admin/cores handler.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.CoreCommand.Execute(SolrNet.ISolrConnection)">
      <summary>
            Executes a Core command
            </summary>
      <param name="connection">The SolrConnection to use.</param>
      <returns>The results of the Command.</returns>
    </member>
    <member name="M:SolrNet.Commands.CoreCommand.AddParameter(System.String,System.String)">
      <summary>
            Adds the specified parameter to the current command.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.AliasCommand">
      <summary>
            Adds an additional name for a core.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.AliasCommand.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.AliasCommand" /> class.
            </summary>
      <param name="coreName">Existing Name of the core.</param>
      <param name="aliasName">New alias to use for the same core.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.CreateCommand">
      <summary>
            Creates a new core based on preexisting instanceDir/solrconfig.xml/schema.xml, and registers it. 
            If persistence is enabled (persist=true), the configuration for this new core will be saved in 'solr.xml'. 
            If a core with the same name exists, while the "new" created core is initalizing, the "old" one will continue to accept requests. 
            Once it has finished, all new request will go to the "new" core, and the "old" core will be unloaded.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.CreateCommand.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.CreateCommand" /> class.
            </summary>
      <param name="name">The name of the core.</param>
      <param name="instanceDir">The Solr instance directory.</param>
    </member>
    <member name="M:SolrNet.Commands.Cores.CreateCommand.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.CreateCommand" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="instanceDir">The Solr instance directory.</param>
      <param name="configFile">The config file to use. (optional)</param>
      <param name="schemaFile">The schema file to use. (optional)</param>
      <param name="dataDir">The data directory. (optional)</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.LoadCommand">
      <summary>
            This will load a new core from an existing configuration (will be implemented when cores can be described with a lazy-load flag).
            </summary>
      <remarks>
            Not Implemented Yet
            </remarks>
    </member>
    <member name="M:SolrNet.Commands.Cores.LoadCommand.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.LoadCommand" /> class.
            </summary>
      <param name="coreName">Name of the core.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.MergeCommand">
      <summary>
            Merges one or more cores into another core.
            See https://wiki.apache.org/solr/MergingSolrIndexes for details.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Cores.MergeCommand.IndexDir">
      <summary>
            Use an index path as merge source
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.MergeCommand.IndexDir.#ctor(System.String)">
      <summary>
            Use an index path as merge source
            </summary>
      <param name="dir">Index path</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.MergeCommand.SrcCore">
      <summary>
            Use a core name as merge source
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.MergeCommand.SrcCore.#ctor(System.String)">
      <summary>
            Use a core name as merge source
            </summary>
      <param name="coreName">Core name</param>
    </member>
    <member name="M:SolrNet.Commands.Cores.MergeCommand.#ctor(System.String,SolrNet.Commands.Cores.MergeCommand.IndexDir,SolrNet.Commands.Cores.MergeCommand.IndexDir[])">
      <summary>
            Merge indexes using their path to identify them.
            Requires Solr 1.4+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="indexDir">
      </param>
      <param name="indexDirs">
      </param>
    </member>
    <member name="M:SolrNet.Commands.Cores.MergeCommand.#ctor(System.String,SolrNet.Commands.Cores.MergeCommand.SrcCore,SolrNet.Commands.Cores.MergeCommand.SrcCore[])">
      <summary>
            Merge indexes using their core names to identify them.
            Requires Solr 3.3+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="srcCore">
      </param>
      <param name="srcCores">
      </param>
    </member>
    <member name="M:SolrNet.Commands.Cores.ReloadCommand.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.ReloadCommand" /> class.
            </summary>
      <param name="coreName">Name of the core to reload.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.RenameCommand">
      <summary>
            Change the names used to access a core.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.RenameCommand.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.RenameCommand" /> class.
            </summary>
      <param name="coreName">Name of the core to rename.</param>
      <param name="newName">The new name to use.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.StatusCommand">
      <summary>
            Get the status for a given core or all cores if no core is specified.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.StatusCommand.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.StatusCommand" /> class.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.StatusCommand.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.StatusCommand" /> class.
            </summary>
      <param name="coreName">Name of the core to get status for.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.SwapCommand">
      <summary>
            Atomically swaps the names used to access two existing cores. 
            This can be useful for replacing a "live" core with an "ondeck" core, and keeping the old "live" core running in case you decide to roll-back.
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.SwapCommand.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.SwapCommand" /> class.
            </summary>
      <param name="coreName">Name of the core to swap.</param>
      <param name="otherName">Name of the other core to swap with.</param>
    </member>
    <member name="T:SolrNet.Commands.Cores.UnloadCommand">
      <summary>
            Removes a core from Solr. Existing requests will continue to be processed, but no new requests can be sent to this core by the name. 
            If a core is registered under more than one name, only that specific mapping is removed.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Cores.UnloadCommand.Delete">
      <summary>
            Remove index data on core unload
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Cores.UnloadCommand.#ctor(System.String,SolrNet.Commands.Cores.UnloadCommand.Delete)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Commands.Cores.UnloadCommand" /> class.
            </summary>
      <remarks>
            Only available in Solr 3.3 and above.
            </remarks>
      <param name="coreName">Name of the core.</param>
      <param name="delete">If not null, deletes the index once the core is unloaded.  (Only available in 3.3 and above).</param>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CommonQueryOptions">
      <summary>
            Common, shared query options
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.CommonQueryOptions.#ctor">
      <summary>
            Common, shared query options
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.Fields">
      <summary>
            Fields to retrieve.
            By default, all stored fields are returned
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.Start">
      <summary>
            Offset in the complete result set for the queries where the set of returned documents should begin
            Default is 0
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.StartOrCursor">
      <summary>
            Starting row or cursor mark for pagination.
            Default is start=0
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.Rows">
      <summary>
            Maximum number of documents from the complete result set to return to the client for every request.
            Default is 100000000.
            NOTE: do not rely on this default value. In a future release the default value will be reset to the Solr default. 
            Always define the number of rows you want. The high value is meant to mimic a SQL query without a TOP/LIMIT clause.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.Facet">
      <summary>
            Facet parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.FilterQueries">
      <summary>
            This parameter can be used to specify a query that can be used to restrict the super set of documents that can be returned, without influencing score. 
            It can be very useful for speeding up complex queries since the queries specified with fq are cached independently from the main query. 
            This assumes the same Filter is used again for a latter query (i.e. there's a cache hit)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.ExtraParams">
      <summary>
            Extra arbitrary parameters to be passed in the request querystring
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommonQueryOptions.Debug">
      <summary>
            Requests debug information: timing and explain of score calculation
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.Algorithms">
      <summary>
            Clustering algorithms.
            See details in:
            <list><bullet>http://project.carrot2.org/algorithms.html</bullet><bullet>http://download.carrot2.org/stable/manual/#section.advanced-topics.fine-tuning.choosing-algorithm</bullet></list></summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.Algorithms.Lingo">
      <summary>
            Diversity: High , many small (outlier) clusters highlighted.
            Labels: Longer, often more descriptive.
            Scalability: Low. For more than about 1000 documents, Lingo clustering will take a long time and large memory
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.Algorithms.STC">
      <summary>
            Diversity: Low, small (outlier) clusters rarely highlighted.
            Labels: Shorter, but still appropriate.
            Scalability: High
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.Algorithms.KMeans">
      <summary>
            Diversity: Low, small (outlier) clusters rarely highlighted.
            Labels: One-word only, may not always describe all documents in the cluster.
            Scalability: Low, based on similar data structures as Lingo.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.ClusteringParameters">
      <summary>
            Clustering parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Engine">
      <summary>
            Engine to use for clustering
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Results">
      <summary>
            When true, the compenent performs a clustering of search results only
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Collection">
      <summary>
            When true, the entire document index is clustered. This is not fully implemented in Solr as of 3.3, so it should be false
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Algorithm">
      <summary>
            Algorithm to use for clustering. Lingo, STC, or KMeans. 
            See http://download.carrot2.org/stable/manual/#section.advanced-topics.fine-tuning.choosing-algorithm for details.
            Or use one from the <see cref="T:SolrNet.Commands.Parameters.Algorithms" /> class
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Title">
      <summary>
            Reuqired field that Solr returns as the search result's title. Must be a stored field.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Snippet">
      <summary>
            Optional field that Solr delivers as search result's content. Must be a stored field. 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.Url">
      <summary>
            Optional field that Solr delivers as the search result's url. Must be a stored field.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.ProduceSummary">
      <summary>
            When true, the snippet field (or title field if there is no snippet) will be highlighted and the highlighted text
            will be used for clustering.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.FragSize">
      <summary>
            Only mattes when ProduceSummary is true. Decides highlighting fragment size. Default is 100.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.NumDescriptions">
      <summary>
            The number of cluster labels to produce
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.SubClusters">
      <summary>
            When true, output sub-clusters. There is no support for this in Carrot2 currently, should always be false.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.ClusteringParameters.LexicalResources">
      <summary>
            Specifies where Carrot2 should get its lexical resources from. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.InterestingTerms">
      <summary>
            Selection of top tf/idf terms for <see cref="T:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters" /></summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.InterestingTerms.List">
      <summary>
            Simple list of top terms
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.InterestingTerms.Details">
      <summary>
            List of top terms and boost used for each term. Unless <see cref="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Boost" /> = true all terms will have boost=1.0
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.InterestingTerms.None">
      <summary>
            No top terms
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.MoreLikeThisParameters">
      <summary>
            More-like-this parameters
            See http://wiki.apache.org/solr/MoreLikeThis
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.MoreLikeThisParameters.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Creates more-like-this parameters
            </summary>
      <param name="fields">The fields to use for similarity. </param>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Fields">
      <summary>
            The fields to use for similarity. 
            NOTE: if possible, these should have a stored TermVector
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinTermFreq">
      <summary>
            Minimum Term Frequency - the frequency below which terms will be ignored in the source doc.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinDocFreq">
      <summary>
            Minimum Document Frequency - the frequency at which words will be ignored which do not occur in at least this many docs.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinWordLength">
      <summary>
            Minimum word length below which words will be ignored.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxWordLength">
      <summary>
            Maximum word length above which words will be ignored.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxQueryTerms">
      <summary>
            Maximum number of query terms that will be included in any generated query.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxTokens">
      <summary>
            Maximum number of tokens to parse in each example doc field that is not stored with TermVector support.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Boost">
      <summary>
            Set if the query will be boosted by the interesting term relevance.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.QueryFields">
      <summary>
            Query fields and their boosts using the same format as that used in DisMaxRequestHandler. 
            These fields must also be specified in <see cref="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Fields" /></summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Count">
      <summary>
            The number of similar documents to return for each result.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters">
      <summary>
            MoreLikeThisHandler parameters
            See http://wiki.apache.org/solr/MoreLikeThisHandler
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            MoreLikeThisHandler parameters
            </summary>
      <param name="fields">The fields to use for similarity</param>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters.MatchInclude">
      <summary>
            Should the response include the matched document? If false, the response will look exactly like a normal /select response.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters.MatchOffset">
      <summary>
            By default, the MoreLikeThis query operates on the first result for 'q'.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters.ShowTerms">
      <summary>
            One of: "list", "details", "none" -- this will show what "interesting" terms are used for the MoreLikeThis query. These are the top tf/idf terms.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions">
      <summary>
            Query options for MoreLikeThis handler
            See http://wiki.apache.org/solr/MoreLikeThisHandler
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions.#ctor(SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters)">
      <summary>
            Query options for MoreLikeThis handler
            See http://wiki.apache.org/solr/MoreLikeThisHandler
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions.Parameters">
      <summary>
            Parameters for MoreLikeThis handler
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.RegexFlag">
      <summary>
            Constants for the choices of Regex Flags 
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.CaseInsensitive">
      <summary>
            By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. 
            Unicode-aware case-insensitive matching can be enabled by specifying the <see cref="F:SolrNet.Commands.Parameters.RegexFlag.UnicodeCase" /> flag in conjunction with this flag.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.Comments">
      <summary>
            In this mode, whitespace is ignored, and embedded comments starting with # are ignored until the end of a line.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.MultiLine">
      <summary>
            In multiline mode the expressions ^ and $ match just after or just before, respectively, a line terminator or the end of the input sequence. 
            By default these expressions only match at the beginning and the end of the entire input sequence.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.Literal">
      <summary>
            When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters. 
            Metacharacters or escape sequences in the input sequence will be given no special meaning.
            The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on matching when used in conjunction with this flag. The other flags become superfluous.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.DotAll">
      <summary>
            In dotall mode, the expression . matches any character, including a line terminator. By default this expression does not match line terminators.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.UnicodeCase">
      <summary>
            When this flag is specified then case-insensitive matching, when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard. 
            By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.CanonEq">
      <summary>
            When this flag is specified then two characters will be considered to match if, and only if, their full canonical decompositions match. 
            The expression "a\u030A", for example, will match the string "å" when this flag is specified. 
            By default, matching does not take canonical equivalence into account.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.RegexFlag.UnixLines">
      <summary>
            In this mode, only the '\n' line terminator is recognized in the behavior of ., ^, and $.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.TermsParameters">
      <summary>
            TermsComponent parameters
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.TermsParameters.#ctor(System.String)">
      <summary>
            TermsComponent parameters
            </summary>
      <param name="field">The name of the field to get the terms from.</param>
    </member>
    <member name="M:SolrNet.Commands.Parameters.TermsParameters.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            TermsComponent parameters
            </summary>
      <param name="fields">The list of names of the fields to get the terms from.</param>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Fields">
      <summary>
            The name of the field to get the terms from. Required.
            (terms.fl)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Lower">
      <summary>
            Lower bound term to start at.
            Optional. If not specified, the empty string is used, meaning start at the beginning of the field.
            (terms.lower)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.LowerInclude">
      <summary>
            Include the lower bound term in the result set. Default is true.
            (terms.lower.incl)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Upper">
      <summary>
            The term to stop at. Either upper or terms.limit must be set.
            (terms.upper)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.UpperInclude">
      <summary>
            Include the upper bound term in the result set. Default is false.
            (terms.upper.incl)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.MinCount">
      <summary>
            The minimum doc frequency to return in order to be included. Results are inclusive of the mincount (i.e. &gt;= mincount)
            (terms.mincount)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.MaxCount">
      <summary>
            The maximum doc frequency. Default is -1 to have no upper bound. Results are inclusive of the maxcount (i.e. less than maxcount)
            (terms.maxcount)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Prefix">
      <summary>
            Restrict matches to terms that start with the prefix. Optional.
            Use this for implementing AutoComplete!
            (terms.prefix)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Regex">
      <summary>
            Restrict matches to terms that match the regular expression. Optional. Requires Solr 3.1+
            (terms.regex)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.RegexFlag">
      <summary>
            Flags to be used when evaluating the regular expression defined in the "terms.regex" parameter 
            (see http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html#compile%28java.lang.String,%20int%29 for more details).
            This parameter can be defined multiple times (each time with different flag). Requires Solr 3.1+
            (terms.regex.flag)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Limit">
      <summary>
            The maximum number of terms to return. The default is 10. If less than 0, then include all terms.
            (terms.limit)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Raw">
      <summary>
            If true, return the raw characters of the indexed term, regardless of if it is human readable. 
            For instance, the indexed form of numeric numbers is not human readable. The default is false.
            (terms.raw)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermsParameters.Sort">
      <summary>
            If count, sorts the terms by the term frequency (highest count first). If index, returns the terms in index order. 
            Default is to sort by count.
            (terms.sort)
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.GroupingFormat">
      <summary>
            Controls the output format of the grouping 
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.GroupingFormat.Grouped">
      <summary>
            The documents are presented within their groups
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.GroupingFormat.Simple">
      <summary>
            Simple : the grouped documents are presented in a single flat list.
            Note : The start and rows parameters refer to numbers of documents instead of numbers of groups.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.GroupingParameters">
      <summary>
            Parameters to query grouping / collapsing 
            (Only SOLR 4.0)
            
            group.func  AND group.query parameters are missing
            <see cref="!:http://wiki.apache.org/solr/FieldCollapsing" /><see cref="!:http://wiki.apache.org/solr/FieldCollapsing#parameters" /></summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.GroupingParameters.#ctor">
      <summary>
            Constructor for GroupingParameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Fields">
      <summary>
            Fields to group the results by.
            Each field will return it's own group.
            Group based on the unique values of a field(s). 
            The field must currently be single-valued and must be either indexed, or be another field type that has a value source and works in a function query - such as ExternalFileField
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Limit">
      <summary>
            The number of results (documents) to return for each group. Defaults to 1.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Offset">
      <summary>
            The offset into the document list of each group.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.OrderBy">
      <summary>
            How to sort documents within a single group. Defaults to the same value as the sort parameter.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Main">
      <summary>
            If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple
            default is false
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Query">
      <summary>
            Return a single group of documents that also match the given query.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Func">
      <summary>
            Group based on the unique values of a function query.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Ngroups">
      <summary>
            Includes the number of groups that have matched the query.
            Default is false.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Format">
      <summary>
            Controls the way the group is formatted in the output
            <see cref="!:http://wiki.apache.org/solr/FieldCollapsing#parameters" /></summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.Truncate">
      <summary>
            If true, facet counts are based on the most relevant document of each group matching the query. Same applies for StatsComponent. Default is false. 
            Requires Solr 3.4+
            <see cref="!:http://wiki.apache.org/solr/FieldCollapsing#parameters" /></summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.GroupingParameters.CachePercent">
      <summary>
            If &gt; 0 enables grouping cache. Grouping is executed actual two searches. This option caches the second search. A value of 0 disables grouping caching. Default is 0. 
            <see cref="!:http://wiki.apache.org/solr/FieldCollapsing#parameters" /></summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.TermsSort">
      <summary>
            TermsComponent sort options
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermsSort.Count">
      <summary>
            Sorts the terms by the term frequency (highest count first)
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermsSort.Index">
      <summary>
            Sorts the terms in index order.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.TermFrequency">
      <summary>
            Returns document term frequency info per term in the document.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.DocumentFrequency">
      <summary>
            Returns the Document Frequency (DF) of the term in the collection. 
            This can be computationally expensive.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.Positions">
      <summary>
            Returns position information.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.Offsets">
      <summary>
            Returns offset information for each term in the document.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.TermFrequency_InverseDocumentFrequency">
      <summary>
            Calculates TF*IDF for each term. This can be computationally expensive. 
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.TermVectorParameterOptions.All">
      <summary>
            Term frequency, document frequency, positions, offsets, term freq * inverse doc freq.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.TermVectorParameters">
      <summary>
            TermsVectorComponent parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.TermVectorParameters.Fields">
      <summary>
            Provides the list of fields to get term vectors for (defaults to fl)
            (tv.fl)
            </summary>
    </member>
    <member name="T:SolrNet.Impl.DebugResults">
      <summary>
            Debug results model
            </summary>
    </member>
    <member name="T:SolrNet.Impl.DebugResults.PlainDebugResults">
      <summary>
            Plain debug results model
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DebugResults.PlainDebugResults.#ctor(SolrNet.Impl.TimingResults,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Plain debug results initializer
            </summary>
    </member>
    <member name="T:SolrNet.Impl.DebugResults.StructuredDebugResults">
      <summary>
            Structured debug results model
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DebugResults.StructuredDebugResults.#ctor(SolrNet.Impl.TimingResults,System.String,System.String,System.Collections.Generic.IDictionary{System.String,SolrNet.Impl.ExplanationModel})">
      <summary>
            Structured debug results initializer
            </summary>
    </member>
    <member name="P:SolrNet.Impl.DebugResults.StructuredDebugResults.ExplanationStructured">
      <summary>
            Structured explanation
            </summary>
    </member>
    <member name="P:SolrNet.Impl.DebugResults.Timing">
      <summary>
            Timing results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.DebugResults.Explanation">
      <summary>
            Explanation results (plain or structured)
            </summary>
    </member>
    <member name="P:SolrNet.Impl.DebugResults.ParsedQuery">
      <summary>
            Parsed query
            </summary>
    </member>
    <member name="P:SolrNet.Impl.DebugResults.ParsedQueryString">
      <summary>
            Parsed query string
            </summary>
    </member>
    <member name="T:SolrNet.Impl.TimingResults">
      <summary>
            Timing results model
            </summary>
    </member>
    <member name="M:SolrNet.Impl.TimingResults.#ctor(System.Double,System.Collections.Generic.IDictionary{System.String,System.Double},System.Collections.Generic.IDictionary{System.String,System.Double})">
      <summary>
            TimingResults initializer
            </summary>
    </member>
    <member name="P:SolrNet.Impl.TimingResults.TotalTime">
      <summary>
            Elapsed time
            </summary>
    </member>
    <member name="P:SolrNet.Impl.TimingResults.Prepare">
      <summary>
            Time results for preparing stage
            </summary>
    </member>
    <member name="P:SolrNet.Impl.TimingResults.Process">
      <summary>
            Time results for processing stage
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ExplanationModel">
      <summary>
            Explanation details model
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ExplanationModel.#ctor(System.Boolean,System.Double,System.String,System.Collections.Generic.ICollection{SolrNet.Impl.ExplanationModel})">
      <summary>
            ExplanationModel initializer
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ExplanationModel.Match">
      <summary>
            Explanation "match" flag
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ExplanationModel.Value">
      <summary>
            Explanation "value" field
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ExplanationModel.Description">
      <summary>
            Explanation description
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ExplanationModel.Details">
      <summary>
            Explanation details collection
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ReplicationDetailsResponse">
      <summary>
            ReplicationDetailsResponse class
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ReplicationDetailsResponse.#ctor(SolrNet.ResponseHeader,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.String,System.String,System.String)">
      <summary>
            ReplicationDetailsResponse constructor
            </summary>
      <param name="ResponseHeader">
      </param>
      <param name="IndexSize">
      </param>
      <param name="IndexPath">
      </param>
      <param name="IsMaster">
      </param>
      <param name="IsSlave">
      </param>
      <param name="IndexVersion">
      </param>
      <param name="Generation">
      </param>
      <param name="IsReplicating">
      </param>
      <param name="TotalPercent">
      </param>
      <param name="TimeRemaining">
      </param>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.responseHeader">
      <summary>
            Gets or sets the Core's Index Result.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.indexSize">
      <summary>
            Index size.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.indexPath">
      <summary>
            Index path.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.isMaster">
      <summary>
            Is Master.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.isSlave">
      <summary>
            Is Slave.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.indexVersion">
      <summary>
            Index number.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.generation">
      <summary>
            Generation number.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.isReplicating">
      <summary>
            Is replicating.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.totalPercent">
      <summary>
            Total percent.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationDetailsResponse.timeRemaining">
      <summary>
            Time remaining.
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrReplicationDetailsResponseParser">
      <summary>
            Parses a Solr Replication result from a Replication Details command.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrReplicationDetailsResponseParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the Details properyes from the response returned.
            </summary>
      <param name="xml">The XML Document to parse.</param>
      <returns>
            Details.
            </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrReplicationIndexVersionResponseParser">
      <summary>
            Parses a Solr Replication result from a Replication IndexVersion command.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrReplicationIndexVersionResponseParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the IndexVersion and Generation properyes from the response returned.
            </summary>
      <param name="xml">The XML Document to parse.</param>
      <returns>
            IndexVersion and Generation.
            </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrReplicationStatusResponseParser">
      <summary>
            Parses a Solr Replication result from a Replication Status command.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrReplicationStatusResponseParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
      </summary>
      <param name="xml">The XML Document to parse.</param>
      <returns>
            Status.
            </returns>
    </member>
    <member name="T:SolrNet.Impl.ReplicationStatusResponse">
      <summary>
            ReplicationStatusResponse class
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ReplicationStatusResponse.#ctor(SolrNet.ResponseHeader,System.String,System.String)">
      <summary>
            ReplicationStatusResponse constructor
            </summary>
      <param name="ResponseHeader">response header</param>
      <param name="Status">status</param>
      <param name="Message">message</param>
    </member>
    <member name="P:SolrNet.Impl.ReplicationStatusResponse.responseHeader">
      <summary>
            ResponseHeader
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationStatusResponse.status">
      <summary>
            Result status
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationStatusResponse.message">
      <summary>
            Result message
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ReplicationIndexVersionResponse">
      <summary>
            ReplicationIndexVersionResponse class
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ReplicationIndexVersionResponse.#ctor(SolrNet.ResponseHeader,System.Int64,System.Int64)">
      <summary>
            ReplicationIndexVersionResponse constructor
            </summary>
      <param name="ResponseHeader">response header</param>
      <param name="IndexVersion">index version</param>
      <param name="Generation">generation</param>
    </member>
    <member name="P:SolrNet.Impl.ReplicationIndexVersionResponse.responseHeader">
      <summary>
            Gets or sets the Core's Index Result.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationIndexVersionResponse.indexversion">
      <summary>
            Index number.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ReplicationIndexVersionResponse.generation">
      <summary>
            Generation number.
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrAbstractResponseParser`1">
      <summary>
            Parses a chunk of a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrAbstractResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.AbstractSolrQueryResults{`0})">
      <summary>
            Parses a chunk of a query response into the results object
            </summary>
      <param name="xml">query response</param>
      <param name="results">results object</param>
    </member>
    <member name="T:SolrNet.Impl.ISolrResponseParser`1">
      <summary>
            Parses a chunk of a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.SolrQueryResults{`0})">
      <summary>
            Parses a chunk of a query response into the results object
            </summary>
      <param name="xml">query response</param>
      <param name="results">results object</param>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.DebugResponseParser`1">
      <summary>
            Parses debug results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.AbstractSolrQueryResults{`0})">
      <summary>
            Parses debug results from a query response
            </summary>
      <param name="xml">Solr xml response</param>
      <param name="results">Solr query results</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.SolrQueryResults{`0})">
      <summary>
            Parses debug results from a query response
            </summary>
      <param name="xml">Solr xml response</param>
      <param name="results">Solr query results</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.ParseSimpleExplanations(System.Xml.Linq.XElement)">
      <summary>
            Parses simple explanations from a query response
            </summary>
      <param name="rootNode">Explanation root node</param>
      <returns>Parsed simple explanations</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.TryParseStructuredExplanations(System.Xml.Linq.XElement)">
      <summary>
            Parses structured explanations from a query response
            </summary>
      <param name="rootNode">Explanation root node</param>
      <returns>Parsed structured explanations</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.ParseExplanationModel(System.Xml.Linq.XElement)">
      <summary>
            Recursively parses each explaination node from a query response
            </summary>
      <param name="item">Explanation node</param>
      <returns>Parsed explanation model</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.CreateExplanationModel(System.Xml.Linq.XElement,System.Collections.Generic.ICollection{SolrNet.Impl.ExplanationModel})">
      <summary>
            Fills explaination model from xml node
            </summary>
      <param name="item">Explanation node</param>
      <param name="details">Explanation details</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.ParseDocuments(System.Xml.Linq.XElement)">
      <summary>
            Parses term vector results
            </summary>
      <param name="rootNode">
      </param>
      <returns>Parsed documents</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.DebugResponseParser`1.GetValue(System.Xml.Linq.XElement)">
      <summary>
            Parses double from xml node
            </summary>
      <param name="docNode">Xml item</param>
      <returns>Parsed double</returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.CollapseExpandResponseParser`1">
      <summary>
            Parses collapse results from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.CollapseExpandResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.SolrQueryResults{`0})">
      <summary>
            Parses the collapsed elements
            </summary>
      <param name="xml">
      </param>
      <param name="results">
      </param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.CollapseExpandResponseParser`1.ParseGroupedResults(System.Xml.Linq.XElement)">
      <summary>
            Parses collapsed document.ids and their counts
            </summary>
      <param name="groupNode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.CollapseExpandResponseParser`1.ParseGroup(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
            Parses collapsed document.ids and their counts
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.ReplicationDetailsResponseParser`1">
      <summary>
            Parses header (status, QTime, etc) and details from a response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationDetailsResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.AbstractSolrQueryResults{`0})">
      <summary>
            Header parser
            </summary>
      <param name="xml">XML</param>
      <param name="results">results</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationDetailsResponseParser`1.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses XML response to response class
            </summary>
      <param name="response">XML</param>
      <returns>ReplicationDetailsResponse class</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationDetailsResponseParser`1.ParseHeader(System.Xml.Linq.XElement)">
      <summary>
            Parses response header
            </summary>
      <param name="node">XML</param>
      <returns>ResponseHeader</returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.ReplicationIndexVersionResponseParser`1">
      <summary>
            Parses header (status, QTime, etc), index version and generation from a response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationIndexVersionResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.AbstractSolrQueryResults{`0})">
      <summary>
            Header parser
            </summary>
      <param name="xml">XML</param>
      <param name="results">results</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationIndexVersionResponseParser`1.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses XML response to response class
            </summary>
      <param name="response">XML</param>
      <returns>ReplicationIndexVersionResponse class</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationIndexVersionResponseParser`1.ParseHeader(System.Xml.Linq.XElement)">
      <summary>
            Parses response header
            </summary>
      <param name="node">XML</param>
      <returns>ResponseHeader</returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.ReplicationStatusResponseParser`1">
      <summary>
            Parses header (status, QTime, etc) and status from a response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationStatusResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.AbstractSolrQueryResults{`0})">
      <summary>
            Header parser
            </summary>
      <param name="xml">XML</param>
      <param name="results">results</param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationStatusResponseParser`1.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses XML response to response class
            </summary>
      <param name="response">XML</param>
      <returns>ReplicationStatusResponse class</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ReplicationStatusResponseParser`1.ParseHeader(System.Xml.Linq.XElement)">
      <summary>
            Parses response header
            </summary>
      <param name="node">XML</param>
      <returns>ResponseHeader</returns>
    </member>
    <member name="T:SolrNet.ISolrCoreReplication">
      <summary>
             Manages Solr core replication.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.EnableReplication">
      <summary>
            Enables replication on the master for all its slaves. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.DisableReplication">
      <summary>
            Disables replication on the master for all its slaves. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.IndexVersion">
      <summary>
            Returns the version of the latest replicatable index on the specified master or slave. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.Details">
      <summary>
            Retrieves configuration details and current status. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.EnablePoll">
      <summary>
            Enables the specified slave to poll for changes on the master. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.DisablePoll">
      <summary>
            Enables the specified slave to poll for changes on the master. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.FetchIndex">
      <summary>
            Forces the specified slave to fetch a copy of the index from its master. If you like, you 
            can pass an extra attribute such as masterUrl or compression (or any other parameter which 
            is specified in the &lt;lst name="slave"&gt; tag) to do a one time replication from a master. 
            This obviates the need for hard-coding the master in the slave. 
            </summary>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.FetchIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Forces the specified slave to fetch a copy of the index from its master. If you like, you 
            can pass an extra attribute such as masterUrl or compression (or any other parameter which 
            is specified in the &lt;lst name="slave"&gt; tag) to do a one time replication from a master. 
            This obviates the need for hard-coding the master in the slave. 
            </summary>
      <param name="parameters">Optional parameters</param>
    </member>
    <member name="M:SolrNet.ISolrCoreReplication.AbortFetch">
      <summary>
            Aborts copying an index from a master to the specified slave.
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrCoreReplication">
      <summary>
            Solr core replication commands.
            </summary>
      <seealso href="http://wiki.apache.org/solr/SolrReplication" />
      <seealso href="https://cwiki.apache.org/confluence/display/solr/Index+Replication" />
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.#ctor(SolrNet.ISolrConnection,SolrNet.Impl.ISolrReplicationStatusResponseParser,SolrNet.Impl.ISolrReplicationIndexVersionResponseParser,SolrNet.Impl.ISolrReplicationDetailsResponseParser)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Impl.SolrCoreReplication" /> class.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.EnableReplication">
      <summary>
            Enables replication on the master for all its slaves. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.DisableReplication">
      <summary>
            Disables replication on the master for all its slaves. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.IndexVersion">
      <summary>
            Returns the version of the latest replicatable index on the specified master or slave. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.Details">
      <summary>
            Retrieves configuration details and current status. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.EnablePoll">
      <summary>
            Enables the specified slave to poll for changes on the master. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.DisablePoll">
      <summary>
            Enables the specified slave to poll for changes on the master. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.FetchIndex">
      <summary>
            Forces the specified slave to fetch a copy of the index from its master. If you like, you 
            can pass an extra attribute such as masterUrl or compression (or any other parameter which 
            is specified in the &lt;lst name="slave"&gt; tag) to do a one time replication from a master. 
            This obviates the need for hard-coding the master in the slave. 
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.FetchIndex(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Forces the specified slave to fetch a copy of the index from its master. If you like, you 
            can pass an extra attribute such as masterUrl or compression (or any other parameter which 
            is specified in the &lt;lst name="slave"&gt; tag) to do a one time replication from a master. 
            This obviates the need for hard-coding the master in the slave. 
            </summary>
      <param name="parameters">Optional parameters</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.AbortFetch">
      <summary>
            Aborts copying an index from a master to the specified slave.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.SendAndParseStatus(SolrNet.ISolrCommand)">
      <summary>
            Sends a command and parses the ReplicationResponse.
            </summary>
      <param name="cmd">The CMD.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.SendAndParseIndexVersion(SolrNet.ISolrCommand)">
      <summary>
            Sends a command and parses the ReplicationResponse.
            </summary>
      <param name="cmd">The CMD.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.SendAndParseDetails(SolrNet.ISolrCommand)">
      <summary>
            Sends a command and parses the ReplicationResponse.
            </summary>
      <param name="cmd">The CMD.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreReplication.Send(SolrNet.ISolrCommand)">
      <summary>
            Sends the specified Command to Solr.
            </summary>
      <param name="command">The Command to send.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrFieldParser">
      <summary>
            Parses a single Solr XML result node
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrFieldParser.CanHandleSolrType(System.String)">
      <summary>
            True if this parser can handle the solrType (int, bool, str, ...)
            </summary>
      <param name="solrType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ISolrFieldParser.CanHandleType(System.Type)">
      <summary>
            True if this parser can handle a type
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ISolrFieldParser.Parse(System.Xml.Linq.XElement,System.Type)">
      <summary>
            Parses a single Solr XML result node
            </summary>
      <param name="field">Solr XML result node</param>
      <param name="t">Type the node value should be converted to</param>
      <returns>Parsed value</returns>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.DateTimeOffsetFieldParser">
      <summary>
            Parses <see cref="T:System.DateTimeOffset" /> fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrFieldSerializer">
      <summary>
            Serializes a value to be consumed by the Solr update handler
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrFieldSerializer.CanHandleType(System.Type)">
      <summary>
            True if this serializer can handle the type
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ISolrFieldSerializer.Serialize(System.Object)">
      <summary>
            Serializes a value to be consumed by the Solr update handler
            </summary>
      <param name="obj">object to serialize</param>
      <returns>List of <see cref="T:SolrNet.Impl.PropertyNode" />s, each represents a XML node to be passed to the Solr update handler</returns>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.AbstractFieldSerializer`1">
      <summary>
            Strongly-typed abstract field parser
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:SolrNet.Impl.QuerySerializers.QueryByFieldRegexSerializer">
      <summary>
            Serializes a SolrQueryByFieldRegex query.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.QuerySerializers.QueryByFieldRegexSerializer.Serialize(SolrNet.SolrQueryByFieldRegex)">
      <summary>
            Serializes a SolrQueryByFieldRegex query.
            </summary>
      <param name="q">The query.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Location">
      <summary>
            Represents a Latitude/Longitude as a 2 dimensional point. 
            </summary>
    </member>
    <member name="F:SolrNet.Location.Latitude">
      <summary>
            Latitude
            </summary>
    </member>
    <member name="F:SolrNet.Location.Longitude">
      <summary>
            Longitude
            </summary>
    </member>
    <member name="M:SolrNet.Location.#ctor(System.Double,System.Double)">
      <summary>
            Represents a Latitude/Longitude as a 2 dimensional point. 
            </summary>
      <param name="latitude">Value between -90 and 90</param>
      <param name="longitude">Value between -180 and 180</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="latitude" /> or <paramref name="longitude" /> are invalid</exception>
    </member>
    <member name="M:SolrNet.Location.IsValidLatitude(System.Double)">
      <summary>
            True if <paramref name="latitude" /> is a valid latitude. Otherwise false.
            </summary>
      <param name="latitude">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Location.IsValidLongitude(System.Double)">
      <summary>
            True if <paramref name="longitude" /> is a valid longitude. Otherwise false.
            </summary>
      <param name="longitude">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Location.TryCreate(System.Double,System.Double)">
      <summary>
            Try to create a <see cref="T:SolrNet.Location" />. 
            Return <value>null</value> if either <paramref name="latitude" /> or <paramref name="longitude" /> are invalid.
            </summary>
      <param name="latitude">Value between -90 and 90</param>
      <param name="longitude">Value between -180 and 180</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Money">
      <summary>
            Money type, for use with Solr CurrencyField
            </summary>
    </member>
    <member name="F:SolrNet.Money.Value">
      <summary>
            Nominal value
            </summary>
    </member>
    <member name="F:SolrNet.Money.Currency">
      <summary>
            Currency code (e.g. USD)
            </summary>
    </member>
    <member name="M:SolrNet.Money.#ctor(System.Decimal,System.String)">
      <summary>
            Money type, for use with Solr CurrencyField
            </summary>
      <param name="value">Nominal value</param>
      <param name="currency">Currency code (e.g. USD)</param>
    </member>
    <member name="T:SolrNet.ExtractField">
      <summary>
            Contains the Fields to index along with the rich documents
            </summary>
    </member>
    <member name="M:SolrNet.ExtractField.#ctor(System.String,System.String)">
      <summary>
            Constructs a new ExtractField with required values
            </summary>
      <param name="fieldName">The name of the field to index</param>
      <param name="value">The value to index</param>
    </member>
    <member name="P:SolrNet.ExtractField.FieldName">
      <summary>
            The name of the field to index
            </summary>
    </member>
    <member name="P:SolrNet.ExtractField.Value">
      <summary>
            The value to index
            </summary>
    </member>
    <member name="P:SolrNet.ExtractField.Boost">
      <summary>
            Boost to apply to this field
            </summary>
    </member>
    <member name="T:SolrNet.ExtractFormat">
      <summary>
            Allows you to specify the extract format when ExtractOnly is specified
            </summary>
    </member>
    <member name="F:SolrNet.ExtractFormat.XML">
      <summary>
            Output as XML
            </summary>
    </member>
    <member name="F:SolrNet.ExtractFormat.Text">
      <summary>
             Output as Text
            </summary>
    </member>
    <member name="T:SolrNet.ExtractParameters">
      <summary>
            Contains parameters that can be specified when extracting a rich document to the index.
            </summary>
      <remarks>
            See http://wiki.apache.org/solr/ExtractingRequestHandler#Input_Parameters
            </remarks>
    </member>
    <member name="M:SolrNet.ExtractParameters.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Constructs a new ExtractParameters with required values
            </summary>
      <param name="content">
      </param>
      <param name="id">
      </param>
      <param name="resourceName">
      </param>
    </member>
    <member name="M:SolrNet.ExtractParameters.#ctor(System.IO.FileStream,System.String)">
      <summary>
            Constructs a new ExtractParameters with required values
            </summary>
      <param name="content">
      </param>
      <param name="id">
      </param>
    </member>
    <member name="P:SolrNet.ExtractParameters.Id">
      <summary>
             Provides the necessary unique id for the document being indexed 
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.ResourceName">
      <summary>
             Name of the file Tika can use it as a hint for detecting mime type.
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.AutoCommit">
      <summary>
            Causes Solr to do a commit after indexing the document, making it immediately searchable. 
            </summary>
      <remarks>
            For good performance when loading many documents, don't call commit until you are done. 
            </remarks>
    </member>
    <member name="P:SolrNet.ExtractParameters.ExtractOnly">
      <summary>
            If true, return the extracted content from Tika without indexing the document. 
            This literally includes the extracted XHTML as a string in the response. 
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.ExtractFormat">
      <summary>
            The format to specify for extraction
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.CaptureAttributes">
      <summary>
            Index attributes of the Tika XHTML elements into separate fields, named after the element. 
            For example, when extracting from HTML, Tika can return the href attributes in &lt;a&gt; tags as fields named "a".
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.Capture">
      <summary>
            Tika XHTML NAME: Capture XHTML elements with the name separately for adding to the Solr document. 
            This can be useful for grabbing chunks of the XHTML into a separate field. For instance, it could be used to grab paragraphs (&lt;p&gt;) 
            and index them into a separate field.
            </summary>
      <remarks>
            Content is also still captured into the overall "content" field. 
            </remarks>
    </member>
    <member name="P:SolrNet.ExtractParameters.Prefix">
      <summary>
            Prefix all fields that are not defined in the schema with the given prefix. 
            This is very useful when combined with dynamic field definitions. 
            </summary>
      <example>
            Setting Prefix to false would effectively ignore all unknown fields generated by Tika given the example schema contains 
            <dynamicField name="ignored_*" type="ignored" /></example>
    </member>
    <member name="P:SolrNet.ExtractParameters.DefaultField">
      <summary>
            If uprefix is not specified and a Field cannot be determined, the default field will be used.
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.Fields">
      <summary>
            Collection of fields and thier specified value.
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.XPath">
      <summary>
            When extracting, only return Tika XHTML content that satisfies the XPath expression. 
            See http://lucene.apache.org/tika/documentation.html for details on the format of Tika XHTML.
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.LowerNames">
      <summary>
            Map all field names to lowercase with underscores. For example, Content-Type would be mapped to content_type.
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.StreamType">
      <summary>
            Mime type of the file - if provided, Tika won't have to try to infer it from the ResourceName and content
            </summary>
    </member>
    <member name="P:SolrNet.ExtractParameters.Content">
      <summary>
            The rich document to index
            </summary>
    </member>
    <member name="T:SolrNet.UpdateParameters">
      <summary>
            Contains parameters that can be specified when making any update to the index.
            </summary>
    </member>
    <member name="P:SolrNet.UpdateParameters.CommitWithin">
      <summary>
            Gets or sets the time period (in milliseconds) within which the document will be committed to the index.
            </summary>
      <value>The time period (in milliseconds) within which the document will be committed to the index.</value>
    </member>
    <member name="T:SolrNet.AddParameters">
      <summary>
            Contains parameters that can be specified when adding a document to the index.
            </summary>
      <remarks>
            See http://wiki.apache.org/solr/UpdateXmlMessages#Optional_attributes_for_.22add.22
            </remarks>
    </member>
    <member name="P:SolrNet.AddParameters.Overwrite">
      <summary>
            Gets or sets the document overwrite option.
            </summary>
      <value>If <c>true</c>, newer documents will replace previously added documents with the same uniqueKey.</value>
    </member>
    <member name="T:SolrNet.DeleteParameters">
      <summary>
            Contains parameters than can be specified when deleting a document from the index.
            </summary>
      <remarks>
            CommitWithin works in SOLR 3.6+ - see https://issues.apache.org/jira/browse/SOLR-2280
            </remarks>
    </member>
    <member name="T:SolrNet.CollapsedDocument">
      <summary>
            Field collapsing result
            </summary>
    </member>
    <member name="P:SolrNet.CollapsedDocument.Id">
      <summary>
             Document ID
            </summary>
    </member>
    <member name="P:SolrNet.CollapsedDocument.FieldValue">
      <summary>
             Collapsed Field Value
            </summary>
    </member>
    <member name="P:SolrNet.CollapsedDocument.CollapseCount">
      <summary>
            Collapsed field count
            </summary>
    </member>
    <member name="T:SolrNet.Commands.ExtractCommand">
      <summary>
            Sends documents to solr for extraction
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CollapseType">
      <summary>
            Parameters to query collapse
            <see href="https://issues.apache.org/jira/browse/SOLR-236" /></summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.CollapseType.Normal">
      <summary>
            Collapse all documents having equal collapsing field
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.CollapseType.Adjacent">
      <summary>
            Collapse only consecutive documents
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CollapseFacetMode">
      <summary>
            Controls if collapsing happens before or after faceting
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.CollapseFacetMode.Before">
      <summary>
            Faceting happens before collapsing
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.CollapseFacetMode.After">
      <summary>
            Faceting happens after collapsing
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CollapseParameters">
      <summary>
            Parameters to query collapse
            <see cref="!:https://issues.apache.org/jira/browse/SOLR-236" /></summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Field">
      <summary>
            Field to group results by
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Threshold">
      <summary>
            Number of continuous results allowed before collapsing
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseParameters.MaxDocs">
      <summary>
            limits the number of documents that CollapseFilter will process to create the filter DocSet. 
            The intention of this is to be able to limit the time collapsing will take for very large result sets 
            (obviously at the expense of accurate collapsing in those cases).
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseParameters.FacetMode">
      <summary>
            Number of continuous results allowed before collapsing
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Type">
      <summary>
            Collapse type: Adjacent or Normal
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.DeleteByIdAndOrQueryParam">
      <summary>
            Parameter to delete document(s) by one or more ids
            and or a query parameters.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.FacetParameters">
      <summary>
            Faceting parameters
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.FacetParameters.#ctor">
      <summary>
            Faceting parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Queries">
      <summary>
            Collection of facet queries
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Prefix">
      <summary>
            Limits the terms on which to facet to those starting with the given string prefix.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Sort">
      <summary>
            Set to true, this parameter indicates that constraints should be sorted by their count. 
            If false, facets will be in their natural index order (unicode). 
            For terms in the ascii range, this will be alphabetically sorted. 
            The default is true if Limit is greater than 0, false otherwise.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Limit">
      <summary>
            This param indicates the maximum number of constraint counts that should be returned for the facet fields. 
            A negative value means unlimited. 
            The default value is 100. 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Offset">
      <summary>
            This param indicates an offset into the list of constraints to allow paging. 
            The default value is 0. 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.MinCount">
      <summary>
            This param indicates the minimum counts for facet fields should be included in the response.
            The default value is 0.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Missing">
      <summary>
            Set to true this param indicates that in addition to the Term based constraints of a facet field, a count of all matching results which have no value for the field should be computed
            Default is false
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.EnumCacheMinDf">
      <summary>
            This param indicates the minimum document frequency (number of documents matching a term) for which the filterCache should be used when determining the constraint count for that term. 
            This is only used during the term enumeration method of faceting (field type faceting on multi-valued or full-text fields).
            A value greater than zero will decrease memory usage of the filterCache, but increase the query time. 
            When faceting on a field with a very large number of terms, and you wish to decrease memory usage, try a low value of 25 to 50 first.
            The default value is 0, causing the filterCache to be used for all terms in the field.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.FacetParameters.Threads">
      <summary>
            This parameter will cause loading the underlying fields used in faceting to be executed in parallel with the maximum number of threads specified.
            By default (or with value=0) it will not spawn any threads. 
            Specifying a negative number of threads will spin up to Integer.MAX_VALUE threads.
            Currently this is limited to the fields, range and query facets are not yet supported.
            Requires Solr 4.5+
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.QueryOptions">
      <summary>
            Query options
            </summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.QueryOptions.AddFields(System.String[])">
      <summary>
            Adds selected fields to this instance
            </summary>
      <param name="fields">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.QueryOptions.AddOrder(SolrNet.SortOrder[])">
      <summary>
            Adds sort orders to this instance
            </summary>
      <param name="order">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.QueryOptions.AddFilterQueries(SolrNet.ISolrQuery[])">
      <summary>
            Adds filter queries to this instance
            </summary>
      <param name="queries">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.QueryOptions.AddFacets(SolrNet.ISolrFacetQuery[])">
      <summary>
            Adds facet queries to this instance
            </summary>
      <param name="queries">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.OrderBy">
      <summary>
            Sort order.
            By default, it's "score desc"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Highlight">
      <summary>
            Highlighting parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.SpellCheck">
      <summary>
            Spell-checking parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Terms">
      <summary>
            Terms parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.MoreLikeThis">
      <summary>
            More-like-this parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Stats">
      <summary>
            This parameter can be used to return the stats for a specific query on top of the results that are normally returned.  Included in the stats are
            min, max, sum, count, missing, sumOfSquares, mean, and stddev values.  
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Collapse">
      <summary>
            This parameter can be used to collapse - or group - documents by the unique values of a specified field. Included in the results are the number of
            records by document key and by field value
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.CollapseExpand">
      <summary>
            The collapsing query parser and the expand component combine to form an approach to grouping documents for field collapsing in search results.
            The expand component requires Solr 4.8+
            </summary>
      <see href="https://cwiki.apache.org/confluence/display/solr/Collapse+and+Expand+Results" />
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.TermVector">
      <summary>
            This parameter can be used to collapse - or group - documents by the unique values of a specified field. Included in the results are the number of
            records by document key and by field value
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Grouping">
      <summary>
            (only SOLR 4.0)
            This parameter can be used to collapse - or group - documents by the unique values of a specified field. Included in the results are the number of
            records by document key and by field value
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.QueryOptions.Clustering">
      <summary>
            This parmeter can be used to group query results into clusters based on document similarity 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.SpellCheckingParameters">
      <summary>
            Spell checking parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Query">
      <summary>
            The query to spellcheck. 
            If spellcheck.q is defined, then it is used, otherwise the original input query is used. 
            The spellcheck.q parameter is intended to be the original query, minus any extra markup like field names, boosts, etc. 
            If the q parameter is specified, then the SpellingQueryConverter class is used to parse it into tokens, otherwise the WhitesepaceTokenizer is used. 
            The choice of which one to use is up to the application. 
            Essentially, if you have a spelling "ready" version in your application, then it is probably better to send spellcheck.q, otherwise, 
            if you just want Solr to do the job, use the q parameter
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Build">
      <summary>
            Create the dictionary for use by the SolrSpellChecker. 
            In typical applications, one needs to build the dictionary before using it. 
            However, it may not always be necessary as it is possible to setup the spellchecker with a dictionary that already exists.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Reload">
      <summary>
            Reload the spell checker. 
            Depends on the implementation of SolrSpellChecker.reload() but usually means reloading the dictionary
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Count">
      <summary>
            The maximum number of suggestions to return
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.OnlyMorePopular">
      <summary>
            Only return suggestions that result in more hits for the query than the existing query.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Collate">
      <summary>
            Take the best suggestion for each token (if it exists) and construct a new query from the suggestions
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Dictionary">
      <summary>
            The name of the spellchecker to use. 
            This defaults to "default". 
            Can be used to invoke a specific spellchecker on a per request basis.
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.StatsParameters">
      <summary>
            Parameters to query stats
            <see href="http://wiki.apache.org/solr/StatsComponent" /></summary>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFacet(System.String)">
      <summary>
            Adds a facet to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.Facets" /> collection
            </summary>
      <param name="facet">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddField(System.String)">
      <summary>
            Adds a field (without facets) to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets" /> collection
            </summary>
      <param name="field">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacet(System.String,System.String)">
      <summary>
            Adds a field with a related facet to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets" /> collection
            </summary>
      <param name="field">
      </param>
      <param name="facet">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacets(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Adds a field with related facets to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets" /> collection
            </summary>
      <param name="field">
      </param>
      <param name="facets">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacets(System.String,System.String[])">
      <summary>
            Adds a field with related facets to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets" /> collection
            </summary>
      <param name="field">
      </param>
      <param name="facets">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Commands.Parameters.StatsParameters.#ctor">
      <summary>
            Parameters to query stats
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets">
      <summary>
            Dictionary of fields to get stats, and their associated facets (if any)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.StatsParameters.Facets">
      <summary>
            Global facets: get these facets' stats for all fields requested in <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets" /></summary>
    </member>
    <member name="T:SolrNet.CollapseResults">
      <summary>
            Collapse results
            <see href="https://issues.apache.org/jira/browse/SOLR-236" /></summary>
    </member>
    <member name="M:SolrNet.CollapseResults.#ctor">
      <summary>
             Initializer
            </summary>
    </member>
    <member name="P:SolrNet.CollapseResults.Field">
      <summary>
            &amp;collapse.field=
            </summary>
    </member>
    <member name="P:SolrNet.CollapseResults.CollapsedDocuments">
      <summary>
            Collapsed document.ids and their counts
            </summary>
    </member>
    <member name="T:SolrNet.Commands.RollbackCommand">
      <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
    </member>
    <member name="T:SolrNet.DateFacetingResult">
      <summary>
            Date faceting result
            </summary>
    </member>
    <member name="M:SolrNet.DateFacetingResult.#ctor">
      <summary>
            Date faceting result
            </summary>
    </member>
    <member name="P:SolrNet.DateFacetingResult.Gap">
      <summary>
            Date range gap (e.g. "+1DAY")
            </summary>
    </member>
    <member name="P:SolrNet.DateFacetingResult.End">
      <summary>
            Maximum value
            </summary>
    </member>
    <member name="P:SolrNet.DateFacetingResult.DateResults">
      <summary>
            The date faceting results.
            </summary>
    </member>
    <member name="P:SolrNet.DateFacetingResult.OtherResults">
      <summary>
            Other date faceting results.
            </summary>
    </member>
    <member name="T:SolrNet.Group`1">
      <summary>
            A Single group of documents
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.Group`1.#ctor">
      <summary>
            A single group of documents
            </summary>
    </member>
    <member name="P:SolrNet.Group`1.GroupValue">
      <summary>
            The groupvalue for this group of documents
            </summary>
    </member>
    <member name="P:SolrNet.Group`1.NumFound">
      <summary>
            Returns the number of matching documents that are found for this groupValue
            </summary>
    </member>
    <member name="P:SolrNet.Group`1.Documents">
      <summary>
            The actual documents in the group.
            You can control the amount of documents in this collection by using the Limit property of the GroupingParameters
            </summary>
    </member>
    <member name="T:SolrNet.GroupedResults`1">
      <summary>
            Contains all the results for one group
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.GroupedResults`1.#ctor">
      <summary>
            Constructor for GroupedResults
            </summary>
    </member>
    <member name="P:SolrNet.GroupedResults`1.Matches">
      <summary>
            Returns the number of unique matching documents that are grouped. 
            </summary>
    </member>
    <member name="P:SolrNet.GroupedResults`1.Groups">
      <summary>
            Grouped documents 
            </summary>
    </member>
    <member name="P:SolrNet.GroupedResults`1.Ngroups">
      <summary>
            Number of groups that have matched the query.
            Only available if <see cref="P:SolrNet.Commands.Parameters.GroupingParameters.Ngroups" /> is true
            </summary>
    </member>
    <member name="M:SolrNet.Impl.AbstractSolrQueryResults`1.Switch``1(System.Func{SolrNet.SolrQueryResults{`0},``0},System.Func{SolrNet.Impl.SolrMoreLikeThisHandlerResults{`0},``0})">
      <summary>
            Visitor / pattern match
            </summary>
      <typeparam name="R">
      </typeparam>
      <param name="query">
      </param>
      <param name="moreLikeThis">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.AbstractSolrQueryResults`1.Switch(System.Action{SolrNet.SolrQueryResults{`0}},System.Action{SolrNet.Impl.SolrMoreLikeThisHandlerResults{`0}})">
      <summary>
            Visitor / pattern match
            </summary>
      <param name="query">
      </param>
      <param name="moreLikeThis">
      </param>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.NextCursorMark">
      <summary>
            CursorMark token returned for deep pagination.
            Only present if explicitly requested through <see cref="P:SolrNet.Commands.Parameters.CommonQueryOptions.StartOrCursor" /></summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.NumFound">
      <summary>
            Total documents found
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.Start">
      <summary>
            Start of the results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.MaxScore">
      <summary>
            Max score in these results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.Header">
      <summary>
            Query response header
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.FacetQueries">
      <summary>
            Facet query results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.FacetFields">
      <summary>
            Facet field results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.FacetDates">
      <summary>
            Facet date results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.AbstractSolrQueryResults`1.FacetPivots">
      <summary>
            Facet pivot results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.SearchableDocumentCount">
      <summary>
            Gets or sets the number of searchable documents in the index.
            </summary>
      <remarks>Represents the numDocs value in a Solr status result.</remarks>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.TotalDocumentCount">
      <summary>
            Gets or sets the total number of documents including logically deleted documents that have not been removed from the index yet.
            </summary>
      <remarks>Represents the maxDoc value in a Solr status result.</remarks>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.Version">
      <summary>
            Gets or sets the Index version.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.SegmentCount">
      <summary>
            The number of Segments that exist for the index.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.IsCurrent">
      <summary>
            Gets or sets a value indicating whether the index is current.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.IsOptimized">
      <summary>
            Gets or sets a value indicating whether the index is optimized.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.HasDeletions">
      <summary>
            Gets or sets a value indicating whether the instance has deletions.
            </summary>
      <remarks>
            If an index has deletions, it may need to undergo a Optimization in order to fully remove any deleted documents.
            </remarks>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.Directory">
      <summary>
            Gets or sets the directory implementation being used by Lucene.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.LastModified">
      <summary>
            Gets or sets the date the index was last modified.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.Size">
      <summary>
            The physical Size of the Index.
            </summary>
      <remarks>
            Appears in Solr R4.0 and above.
            </remarks>
    </member>
    <member name="P:SolrNet.Impl.CoreIndexResult.SizeInBytes">
      <summary>
            the physical Size of the Index in bytes.
            </summary>
      <remarks>
            Appears in Solr R4.0 and above.
            </remarks>
    </member>
    <member name="M:SolrNet.Impl.CoreResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Impl.CoreResult" /> class.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.CoreResult.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Impl.CoreResult" /> class.
            </summary>
      <param name="coreName">Name of the core.</param>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.Name">
      <summary>
            The name of the Core.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.IsDefaultCore">
      <summary>
            True if this is the default core. Otherwise false.
            Note that this is only available on Solr 4+.
            For older versions this will always be false.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.InstanceDir">
      <summary>
            The directory the Solr instance is located at.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.DataDir">
      <summary>
            The directory all data for this Core is located at.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.StartTime">
      <summary>
            The time when this Core was last started.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.Uptime">
      <summary>
            The number of milliseconds this Core has been live.
            </summary>
    </member>
    <member name="P:SolrNet.Impl.CoreResult.Index">
      <summary>
            Gets or sets the Core's Index Result.
            </summary>
    </member>
    <member name="T:SolrNet.Impl.HighlightedSnippets">
      <summary>
            Highlighted snippets by field
            </summary>
    </member>
    <member name="P:SolrNet.Impl.HighlightedSnippets.Snippets">
      <summary>
            Highlighted snippets by field
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrStatusResponseParser">
      <summary>
            Parses a Solr Core Result from a Core Status command.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrStatusResponseParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the list of returned <see cref="T:SolrNet.Impl.CoreResult" /> instances from the response returned.
            </summary>
      <param name="xml">The XML Document to parse.</param>
      <returns>
            The list of results.
            </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrMoreLikeThisHandlerQueryResultsParser`1">
      <summary>
            Query results parser interface
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrMoreLikeThisHandlerQueryResultsParser`1.Parse(System.String)">
      <summary>
            Parses solr's mlt handler response
            </summary>
      <param name="r">solr response</param>
      <returns>query results</returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrMoreLikeThisHandlerResponseParser`1">
      <summary>
            Parses a chunk of a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrMoreLikeThisHandlerResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.Impl.SolrMoreLikeThisHandlerResults{`0})">
      <summary>
            Parses a chunk of a query response into the results object
            </summary>
      <param name="xml">query response</param>
      <param name="results">results object</param>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.TermVectorResultsParser`1">
      <summary>
            Parses TermVector results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.TermVectorResultsParser`1.ParseDocuments(System.Xml.Linq.XElement)">
      <summary>
            Parses term vector results
            </summary>
      <param name="rootNode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.ISolrCoreAdmin">
      <summary>
             Manages Solr cores.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Alias(System.String,System.String)">
      <summary>
            The ALIAS action establishes an additional name by which a core may be referenced.
            Subsequent actions may use the core's original name or any of its aliases.
            </summary>
      <remarks>
            This action is still considered experimental.
            </remarks>
      <param name="coreName">The name or alias of an existing core.</param>
      <param name="otherName">The additional name by which this core should be known.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Create(System.String,System.String)">
      <summary>
            The CREATE action creates a new core and registers it. If persistence is enabled
            (persistent="true" on the &lt;solr&gt; element), the updated configuration for this new core will be
            saved in solr.xml. If a core with the given name already exists, it will continue to handle requests
            while the new core is initializing. When the new core is ready, it will take new requests and the old core
            will be unloaded.
            </summary>
      <param name="coreName">The name of the new core. Same as "name" on the &lt;core&gt; element.</param>
      <param name="instanceDir">The directory where files for this core should be stored. Same as "instanceDir" on the &lt;core&gt; element.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Create(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            The CREATE action creates a new core and registers it. If persistence is enabled
            (persistent="true" on the &lt;solr&gt; element), the updated configuration for this new core will be
            saved in solr.xml. If a core with the given name already exists, it will continue to handle requests
            while the new core is initializing. When the new core is ready, it will take new requests and the old core
            will be unloaded.
            </summary>
      <param name="coreName">The name of the new core. Same as "name" on the &lt;core&gt; element.</param>
      <param name="instanceDir">The directory where files for this core should be stored. Same as "instanceDir" on the &lt;core&gt; element.</param>
      <param name="configFile">(Optional) Name of the config file (solrconfig.xml) relative to "instanceDir".</param>
      <param name="schemaFile">(Optional) Name of the schema file (schema.xml) relative to "instanceDir".</param>
      <param name="dataDir">(Optional) Name of the data directory relative to "instanceDir".</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Reload(System.String)">
      <summary>
            The RELOAD action loads a new core from the configuration of an existing, registered core.
            While the new core is initializing, the existing one will continue to handle requests.
            When the new core is ready, it takes over and the old core is unloaded.
            This is useful when you've made changes to a core's configuration on disk, such as adding
            new field definitions. Calling the RELOAD action lets you apply the new configuration without
            having to restart the Web container.
            </summary>
      <param name="coreName">The name of the core to be reloaded.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Rename(System.String,System.String)">
      <summary>
            The RENAME action changes the name of a core.
            </summary>
      <param name="coreName">The name of the core to be renamed.</param>
      <param name="otherName">The new name for the core. If the persistent attribute of &lt;solr&gt; is
            "true", the new name will be written to solr.xml as the "name" attribute
            of the &lt;core&gt; attribute.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Status">
      <summary>
            The STATUS action returns the status of all running cores.
            </summary>
      <returns>A list of Core Results.</returns>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Status(System.String)">
      <summary>
            The STATUS action returns the status of the named core.
            </summary>
      <param name="coreName">The name of a core, as listed in the "name" attribute of a &lt;core&gt; element in solr.xml.</param>
      <returns>Core result.</returns>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Swap(System.String,System.String)">
      <summary>
            SWAP atomically swaps the names used to access two existing cores.
            This can be used to swap new content into production. The prior core
            remains available and can be swapped back, if necessary. Each core will
            be known by the name of the other, after the swap.
            </summary>
      <param name="coreName">The name of one of the cores to be swapped.</param>
      <param name="otherName">The name of one of the cores to be swapped.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Unload(System.String)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core&gt; element
            with this "name" attribute will be removed from solr.xml.</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Unload(System.String,System.Boolean)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core&gt; element
            with this "name" attribute will be removed from solr.xml.</param>
      <param name="deleteIndex">If set to <c>true</c> deletes the index once the core is unloaded.  (Only available in 3.3 and above).</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Unload(System.String,SolrNet.Commands.Cores.UnloadCommand.Delete)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core         &gt; element
            with this "name" attribute will be removed from solr.xml.</param>
      <param name="delete">If not null, deletes the index once the core is unloaded.  (Only available in 3.3 and above).</param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Merge(System.String,SolrNet.Commands.Cores.MergeCommand.SrcCore,SolrNet.Commands.Cores.MergeCommand.SrcCore[])">
      <summary>
            Merge indexes using their core names to identify them.
            Requires Solr 3.3+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="srcCore">
      </param>
      <param name="srcCores">
      </param>
    </member>
    <member name="M:SolrNet.ISolrCoreAdmin.Merge(System.String,SolrNet.Commands.Cores.MergeCommand.IndexDir,SolrNet.Commands.Cores.MergeCommand.IndexDir[])">
      <summary>
            Merge indexes using their path to identify them.
            Requires Solr 1.4+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="indexDir">
      </param>
      <param name="indexDirs">
      </param>
    </member>
    <member name="T:SolrNet.Impl.SolrCoreAdmin">
      <summary>
            Solr core administration commands.
            </summary>
      <seealso href="http://wiki.apache.org/solr/CoreAdmin" />
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.#ctor(SolrNet.ISolrConnection,SolrNet.Impl.ISolrHeaderResponseParser,SolrNet.Impl.ISolrStatusResponseParser)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Impl.SolrCoreAdmin" /> class.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Alias(System.String,System.String)">
      <summary>
            The ALIAS action establishes an additional name by which a core may be referenced.
            Subsequent actions may use the core's original name or any of its aliases.
            </summary>
      <remarks>
            This action is still considered experimental.
            </remarks>
      <param name="coreName">The name or alias of an existing core.</param>
      <param name="otherName">The additional name by which this core should be known.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Create(System.String,System.String)">
      <summary>
            The CREATE action creates a new core and registers it. If persistence is enabled
            (persistent="true" on the &lt;solr&gt; element), the updated configuration for this new core will be
            saved in solr.xml. If a core with the given name already exists, it will continue to handle requests
            while the new core is initializing. When the new core is ready, it will take new requests and the old core
            will be unloaded.
            </summary>
      <param name="coreName">The name of the new core. Same as "name" on the &lt;core&gt; element.</param>
      <param name="instanceDir">The directory where files for this core should be stored. Same as "instanceDir" on the &lt;core&gt; element.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Create(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            The CREATE action creates a new core and registers it. If persistence is enabled
            (persistent="true" on the &lt;solr&gt; element), the updated configuration for this new core will be
            saved in solr.xml. If a core with the given name already exists, it will continue to handle requests
            while the new core is initializing. When the new core is ready, it will take new requests and the old core
            will be unloaded.
            </summary>
      <param name="coreName">The name of the new core. Same as "name" on the &lt;core&gt; element.</param>
      <param name="instanceDir">The directory where files for this SolrCore should be stored. Same as "instanceDir" on the &lt;core&gt; element.</param>
      <param name="configFile">(Optional) Name of the config file (solrconfig.xml) relative to "instanceDir".</param>
      <param name="schemaFile">(Optional) Name of the schema file (schema.xml) relative to "instanceDir".</param>
      <param name="dataDir">(Optional) Name of the data directory relative to "instanceDir".</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Reload(System.String)">
      <summary>
            The RELOAD action loads a new core from the configuration of an existing, registered core.
            While the new core is initializing, the existing one will continue to handle requests.
            When the new core is ready, it takes over and the old core is unloaded.
            This is useful when you've made changes to a core's configuration on disk, such as adding
            new field definitions. Calling the RELOAD action lets you apply the new configuration without
            having to restart the Web container.
            </summary>
      <param name="coreName">The name of the core to be reloaded.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Rename(System.String,System.String)">
      <summary>
            The RENAME action changes the name of a core.
            </summary>
      <param name="coreName">The name of the core to be renamed.</param>
      <param name="otherName">The new name for the core. If the persistent attribute of &lt;solr&gt; is
            "true", the new name will be written to solr.xml as the "name" attribute
            of the &lt;core&gt; attribute.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Status">
      <summary>
            The STATUS action returns the status of all running cores.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Status(System.String)">
      <summary>
            The STATUS action returns the status of the named core.
            </summary>
      <param name="coreName">The name of a core, as listed in the "name" attribute of a &lt;core&gt; element in solr.xml.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Swap(System.String,System.String)">
      <summary>
            SWAP atomically swaps the names used to access two existing cores.
            This can be used to swap new content into production. The prior core
            remains available and can be swapped back, if necessary. Each core will
            be known by the name of the other, after the swap.
            </summary>
      <param name="coreName">The name of one of the cores to be swapped.</param>
      <param name="otherName">The name of one of the cores to be swapped.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Unload(System.String)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core&gt; element
            with this "name" attribute will be removed from solr.xml.</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Unload(System.String,System.Boolean)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core&gt; element
            with this "name" attribute will be removed from solr.xml.</param>
      <param name="deleteIndex">If set to <c>true</c> deletes the index once the core is unloaded.  (Only available in 3.3 and above).</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Unload(System.String,SolrNet.Commands.Cores.UnloadCommand.Delete)">
      <summary>
            The UNLOAD action removes a core from Solr. Active requests will
            continue to be processed, but no new requests will be sent to the named core.
            If a core is registered under more than one name, only the given name is removed.
            </summary>
      <param name="coreName">The name of the core to be to be removed. If the persistent
            attribute of &lt;solr&gt; is set to "true", the &lt;core&gt; element
            with this "name" attribute will be removed from solr.xml.</param>
      <param name="delete">If not null, deletes the index once the core is unloaded.  (Only available in 3.3 and above).</param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Merge(System.String,SolrNet.Commands.Cores.MergeCommand.SrcCore,SolrNet.Commands.Cores.MergeCommand.SrcCore[])">
      <summary>
            Merge indexes using their core names to identify them.
            Requires Solr 3.3+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="srcCore">
      </param>
      <param name="srcCores">
      </param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Merge(System.String,SolrNet.Commands.Cores.MergeCommand.IndexDir,SolrNet.Commands.Cores.MergeCommand.IndexDir[])">
      <summary>
            Merge indexes using their path to identify them.
            Requires Solr 1.4+
            </summary>
      <param name="destinationCore">
      </param>
      <param name="indexDir">
      </param>
      <param name="indexDirs">
      </param>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.SendAndParseHeader(SolrNet.ISolrCommand)">
      <summary>
            Sends a command and parses the ResponseHeader.
            </summary>
      <param name="cmd">The CMD.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.Send(SolrNet.ISolrCommand)">
      <summary>
            Sends the specified Command to Solr.
            </summary>
      <param name="command">The Command to send.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrCoreAdmin.ParseStatusResponse(System.String)">
      <summary>
            Parses the status response.
            </summary>
      <param name="responseXml">The response XML.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.ISolrConnection">
      <summary>
            Manages HTTP connection with Solr
            </summary>
    </member>
    <member name="M:SolrNet.ISolrConnection.Post(System.String,System.String)">
      <summary>
            POSTs to Solr
            </summary>
      <param name="relativeUrl">Path to post to</param>
      <param name="s">POST content</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrConnection.PostStream(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            POSTs binary to Solr
            </summary>
      <param name="relativeUrl">Path to post to</param>
      <param name="contentType">Request content type (optional)</param>
      <param name="content">Binary content</param>
      <param name="getParameters">extra parameters to pass in query string</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrConnection.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            GETs from Solr
            </summary>
      <param name="relativeUrl">Path to get from</param>
      <param name="parameters">Query string parameters</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.PostSolrConnection">
      <summary>
            Manages HTTP connection with Solr, uses POST request instead of GET in order to handle large requests
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrStatusResponseParser">
      <summary>
            Parses the results of a Core Status command.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrStatusResponseParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the results of a Core Status command.
            </summary>
      <param name="xml">The XML Document to parse.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrStatusResponseParser.ParseCore(System.Xml.Linq.XElement)">
      <summary>
            Parses the details of a <see cref="T:SolrNet.Impl.CoreResult" /> that could be parsed.
            </summary>
      <param name="node">The node to inspect.</param>
      <returns>The parsed <see cref="T:SolrNet.Impl.CoreResult" />.</returns>
    </member>
    <member name="M:SolrNet.Impl.SolrStatusResponseParser.ParseCoreIndex(System.Xml.Linq.XElement)">
      <summary>
            Parses the details of the index for a Core.
            </summary>
      <param name="node">The node to parse.</param>
      <returns>The <see cref="T:SolrNet.Impl.CoreIndexResult" /> that was parsed.</returns>
    </member>
    <member name="T:SolrNet.Impl.SolrMoreLikeThisHandlerResults`1">
      <summary>
            More-like-this handler results
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.Impl.SolrMoreLikeThisHandlerResults`1.#ctor">
      <summary>
            More-like-this handler results
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrMoreLikeThisHandlerResults`1.Switch``1(System.Func{SolrNet.SolrQueryResults{`0},``0},System.Func{SolrNet.Impl.SolrMoreLikeThisHandlerResults{`0},``0})">
      <summary>
            Visitor / pattern match
            </summary>
      <typeparam name="R">
      </typeparam>
      <param name="query">
      </param>
      <param name="moreLikeThis">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Impl.SolrMoreLikeThisHandlerResults`1.Match">
      <summary>
            Matched document
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrMoreLikeThisHandlerResults`1.InterestingTerms">
      <summary>
            Interesting terms in More-like-this query
            </summary>
    </member>
    <member name="T:SolrNet.Impl.TermsResults">
      <summary>
            Terms results
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermsResults.Terms">
      <summary>
            Terms results
            </summary>
    </member>
    <member name="T:SolrNet.Impl.TermsResult">
      <summary>
            Terms Results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.TermsResult.Field">
      <summary>
            terms field
            </summary>
    </member>
    <member name="P:SolrNet.Impl.TermsResult.Terms">
      <summary>
            Spelling suggestions
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FacetQuerySerializers.SolrFacetPivotQuerySerializer">
      <summary>
            Serializes <see cref="T:SolrNet.SolrFacetPivotQuery" /></summary>
    </member>
    <member name="M:SolrNet.Impl.FacetQuerySerializers.SolrFacetPivotQuerySerializer.Serialize(SolrNet.SolrFacetPivotQuery)">
      <summary>
            Serializes <see cref="T:SolrNet.SolrFacetPivotQuery" /></summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrDIHStatusParser">
      <summary>
            Provides an interface to parsing a solr schema xml document into a <see cref="T:SolrNet.SolrDIHStatus" /> object.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrDIHStatusParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the specified solr DIH status XML.
            </summary>
      <param name="solrDIHStatusXml">The solr schema XML.</param>
      <returns>a object model of the solr schema.</returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ClusterResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.SolrQueryResults{`0})">
      <summary>
            Parse the xml document returned by solr 
            </summary>
      <param name="xml">
      </param>
      <param name="results">
      </param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ClusterResponseParser`1.GetDocumentList(System.Xml.Linq.XElement)">
      <summary>
            Grab a list of the documents from a cluster 
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ClusterResponseParser`1.ParseClusterNode(System.Xml.Linq.XElement)">
      <summary>
            Assign Title, Score, and documents to a cluster. Adds each cluster
            to and returns a ClusterResults 
            </summary>
      <param name="n"> Node to parse into a Cluster </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.TermsResponseParser`1">
      <summary>
            Parses spell-checking results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.TermsResponseParser`1.ParseTerms(System.Xml.Linq.XElement)">
      <summary>
            Parses spell-checking results
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.TermVectorDocumentResult">
      <summary>
            Terms Results
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorDocumentResult.UniqueKey">
      <summary>
            Unique key of document
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorDocumentResult.TermVector">
      <summary>
            Term Vectors
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Field">
      <summary>
            Field name
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Term">
      <summary>
            Term value
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Tf">
      <summary>
            Term frequency
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Df">
      <summary>
            Document frequency
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Tf_Idf">
      <summary>
            TF*IDF weight
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Offsets">
      <summary>
            Term offsets
            </summary>
    </member>
    <member name="F:SolrNet.Impl.TermVectorResult.Positions">
      <summary>
            Term offsets
            </summary>
    </member>
    <member name="T:SolrNet.Pivot">
      <summary>
            Pivot facet
            </summary>
    </member>
    <member name="M:SolrNet.Pivot.#ctor">
      <summary>
            Pivot facet
            </summary>
    </member>
    <member name="P:SolrNet.Pivot.Field">
      <summary>
            Pivot field name
            </summary>
    </member>
    <member name="P:SolrNet.Pivot.Value">
      <summary>
            Pivot value
            </summary>
    </member>
    <member name="P:SolrNet.Pivot.Count">
      <summary>
            Pivot facet count
            </summary>
    </member>
    <member name="T:SolrNet.SolrMLTQuery">
      <summary>
            MoreLikeThisHandler query
            </summary>
    </member>
    <member name="M:SolrNet.SolrMLTQuery.FromStreamUrl(System.String)">
      <summary>
            Uses a web page to look similar documents.
            Requires remoteStreaming to be enabled.
            </summary>
      <param name="url">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.SolrMLTQuery.FromStreamBody(System.String)">
      <summary>
            Uses text to look for similar documents.
            </summary>
      <param name="body">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.SolrMLTQuery.FromQuery(SolrNet.ISolrQuery)">
      <summary>
            Uses the first result in a query to look for similar documents
            </summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.SolrMLTQuery.Switch``1(System.Func{SolrNet.ISolrQuery,``0},System.Func{System.String,``0},System.Func{System.Uri,``0})">
      <summary>
            Visitor / pattern match
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="query">
      </param>
      <param name="streamBody">
      </param>
      <param name="streamUrl">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.GroupingResponseParser`1">
      <summary>
            Parses group.fields from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.GroupingResponseParser`1.Parse(System.Xml.Linq.XDocument,SolrNet.SolrQueryResults{`0})">
      <summary>
            Parses the grouped elements
            </summary>
      <param name="xml">
      </param>
      <param name="results">
      </param>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.GroupingResponseParser`1.ParseGroupedResults(System.Xml.Linq.XElement)">
      <summary>
            Parses collapsed document.ids and their counts
            </summary>
      <param name="groupNode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.GroupingResponseParser`1.ParseGroup(System.Xml.Linq.XElement)">
      <summary>
            Parses collapsed document.ids and their counts
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.ISolrFacetQuery">
      <summary>
            Facet query interface
            </summary>
    </member>
    <member name="T:SolrNet.SolrFacetPivotQuery">
      <summary>
            pivot facet query
            <see href="http://wiki.apache.org/solr/SimpleFacetParameters#facet.pivot" /></summary>
    </member>
    <member name="P:SolrNet.SolrFacetPivotQuery.Fields">
      <summary>
            A list of fields to pivot. Multiple values will create multiple sections in the response.
            <example>
            Example single pivot value  new []{"manu,cat"}
            Example multiple pivot values :  new [] {"manu,cat","inStock,cat"}
            </example></summary>
    </member>
    <member name="P:SolrNet.SolrFacetPivotQuery.MinCount">
      <summary>
            The minimum number of documents that need to match for the result to show up in the results. Default value is 1
            </summary>
    </member>
    <member name="T:SolrNet.SolrMoreLikeThisHandlerQuery">
      <summary>
            Standard MoreLikeThisHandlerQuery
            </summary>
    </member>
    <member name="T:SolrNet.SolrMoreLikeThisHandlerStreamBodyQuery">
      <summary>
            MoreLikeThisHandler stream.body query 
            </summary>
    </member>
    <member name="T:SolrNet.SolrMoreLikeThisHandlerStreamUrlQuery">
      <summary>
            MoreLikeThisHandler stream.url query
            </summary>
    </member>
    <member name="T:SolrNet.CalculationAccuracy">
      <summary>
             Defines the level of accuracy applied for distance calculations.
             Requires Solr 3.4+
            </summary>
    </member>
    <member name="F:SolrNet.CalculationAccuracy.Radius">
      <summary>
             Highest accuracy but can have a performance hit.
            </summary>
    </member>
    <member name="F:SolrNet.CalculationAccuracy.BoundingBox">
      <summary>
             Less accurany (as it draws a bounding box around the points) but faster.
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryByDistance">
      <summary>
             Retrieves entries from the index based on distance from a point.
             Requires Solr 3.4+
            </summary>
    </member>
    <member name="M:SolrNet.SolrQueryByDistance.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
            New query by distance using <see cref="F:SolrNet.CalculationAccuracy.Radius" /></summary>
      <param name="fieldName">
      </param>
      <param name="pointLatitude">
      </param>
      <param name="pointLongitude">
      </param>
      <param name="distance">
      </param>
    </member>
    <member name="M:SolrNet.SolrQueryByDistance.#ctor(System.String,SolrNet.Location,System.Double)">
      <summary>
            Query by distance using <see cref="F:SolrNet.CalculationAccuracy.Radius" /></summary>
      <param name="fieldName">
      </param>
      <param name="location">
      </param>
      <param name="distance">
      </param>
    </member>
    <member name="M:SolrNet.SolrQueryByDistance.#ctor(System.String,System.Double,System.Double,System.Double,SolrNet.CalculationAccuracy)">
      <summary>
            New query by distance
            </summary>
      <param name="fieldName">
      </param>
      <param name="pointLatitude">
      </param>
      <param name="pointLongitude">
      </param>
      <param name="distance">
      </param>
      <param name="accuracy">
      </param>
    </member>
    <member name="P:SolrNet.SolrQueryByDistance.FieldName">
      <summary>
            Coords Solr field name
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryByDistance.Accuracy">
      <summary>
            Calculation accuracy
            </summary>
    </member>
    <member name="T:SolrNet.DIHStatus">
      <Summary>
             Data import handler status
            </Summary>
    </member>
    <member name="F:SolrNet.DIHStatus.IDLE">
      <Summary>
             Idle 
            </Summary>
    </member>
    <member name="F:SolrNet.DIHStatus.BUSY">
      <Summary>
             Busy
            </Summary>
    </member>
    <member name="T:SolrNet.SolrDIHStatus">
      <summary>
            Represents a Solr data import handler status.
            </summary>
    </member>
    <member name="P:SolrNet.SolrDIHStatus.Status">
      <summary>
            Busy or idle
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrDIHStatusParser">
      <summary>
            Parses a Solr DIH Status xml document into a strongly typed
            <see cref="T:SolrNet.SolrDIHStatus" /> object.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrDIHStatusParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the specified Solr DIH Status xml.
            </summary>
      <param name="solrDIHStatusXml">The Solr DIH Status xml to parse.</param>
      <returns>A strongly styped representation of the Solr HDI Status xml.</returns>
    </member>
    <member name="T:SolrNet.Exceptions.SolrNetException">
      <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
    </member>
    <member name="M:SolrNet.Exceptions.SolrNetException.#ctor(System.Exception)">
      <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrNetException.#ctor(System.String)">
      <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrNetException.#ctor">
      <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
    </member>
    <member name="M:SolrNet.Exceptions.SolrNetException.#ctor(System.String,System.Exception)">
      <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="T:SolrNet.ExtractResponse">
      <summary>
            Response of the Extraction
            </summary>
    </member>
    <member name="P:SolrNet.ExtractResponse.ResponseHeader">
      <summary>
            Operation response header
            </summary>
    </member>
    <member name="P:SolrNet.ExtractResponse.Content">
      <summary>
            The content of the rich document used for ExtractingRequestHandler with extract only set to true
            http://wiki.apache.org/solr/TikaExtractOnlyExampleOutput 
            </summary>
    </member>
    <member name="P:SolrNet.ExtractResponse.Metadata">
      <summary>
            Metadata fields populated by ExtractingRequestHandler with extract only set to true
            </summary>
    </member>
    <member name="T:SolrNet.FacetDateOther">
      <summary>
            Indicates that in addition to the counts for each date range constraint between facet.date.start and facet.date.end, 
            counts should also be computed for other
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateOther.Before">
      <summary>
            All records with field values lower then lower bound of the first range
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateOther.After">
      <summary>
            All records with field values greater then the upper bound of the last range
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateOther.Between">
      <summary>
            All records with field values between the start and end bounds of all ranges
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateOther.None">
      <summary>
            Compute none of this information. Overrides all other options.
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateOther.All">
      <summary>
            Shortcut for before, between, and after
            </summary>
    </member>
    <member name="T:SolrNet.FacetDateInclude">
      <summary>
            By default, the ranges used to compute date faceting between facet.date.start and facet.date.end are all inclusive of both endpoints, 
            while the the "before" and "after" ranges are not inclusive. This behavior can be modified by the facet.date.include param, which can be any combination of the following options...
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateInclude.Lower">
      <summary>
            all gap based ranges include their lower bound
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateInclude.Upper">
      <summary>
            all gap based ranges include their upper bound
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateInclude.Edge">
      <summary>
             the first and last gap ranges include their edge bounds (ie: lower for the first one, upper for the last one) 
             even if the corresponding upper/lower option is not specified
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateInclude.Outer">
      <summary>
            the "before" and "after" ranges will be inclusive of their bounds, 
            even if the first or last ranges already include those boundaries.
            </summary>
    </member>
    <member name="P:SolrNet.FacetDateInclude.All">
      <summary>
            shorthand for lower, upper, edge, outer
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrDocumentPropertyVisitor">
      <summary>
            Visits a document with a raw xml Solr response field
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrDocumentPropertyVisitor.Visit(System.Object,System.String,System.Xml.Linq.XElement)">
      <summary>
            Visits a document with a raw xml Solr response field
            </summary>
      <param name="doc">Document object</param>
      <param name="fieldName">Solr field name</param>
      <param name="field">Raw XML Solr field</param>
    </member>
    <member name="T:SolrNet.Impl.DocumentPropertyVisitors.AggregateDocumentVisitor">
      <summary>
            Aggregate document visitor
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.AggregateDocumentVisitor.#ctor(System.Collections.Generic.IEnumerable{SolrNet.Impl.ISolrDocumentPropertyVisitor})">
      <summary>
            Aggregate document visitor
            </summary>
      <param name="visitors">Visitors to aggregate</param>
    </member>
    <member name="T:SolrNet.Impl.DocumentPropertyVisitors.DefaultDocumentVisitor">
      <summary>
            Default document visitor
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.DefaultDocumentVisitor.#ctor(SolrNet.IReadOnlyMappingManager,SolrNet.Impl.ISolrFieldParser)">
      <summary>
            Default document visitor
            </summary>
      <param name="mapper">
      </param>
      <param name="parser">
      </param>
    </member>
    <member name="T:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor">
      <summary>
            Document visitor that handles generic dictionary properties
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.#ctor(SolrNet.IReadOnlyMappingManager,SolrNet.Impl.ISolrFieldParser)">
      <summary>
            Document visitor that handles generic dictionary properties
            </summary>
      <param name="mapper">
      </param>
      <param name="parser">
      </param>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.CanHandleType(System.Type)">
      <summary>
            True if this visitor can handle this Type
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.NewDictionary(System.Type[])">
      <summary>
            Creates a new <see cref="T:System.Collections.Generic.Dictionary`2" /></summary>
      <param name="typeArgs">Key and Value type parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.SetKV(System.Object,System.Object,System.Object)">
      <summary>
            Sets a key/value in a generic dictionary
            </summary>
      <param name="dict">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> instance</param>
      <param name="key">Key value</param>
      <param name="value">Value value</param>
    </member>
    <member name="T:SolrNet.Impl.DocumentPropertyVisitors.RegularDocumentVisitor">
      <summary>
            Pass-through document visitor
            </summary>
    </member>
    <member name="M:SolrNet.Impl.DocumentPropertyVisitors.RegularDocumentVisitor.#ctor(SolrNet.Impl.ISolrFieldParser,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Pass-through document visitor
            </summary>
      <param name="parser">
      </param>
      <param name="mapper">
      </param>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.AggregateFieldParser">
      <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldParser" />s
            </summary>
    </member>
    <member name="M:SolrNet.Impl.FieldParsers.AggregateFieldParser.#ctor(System.Collections.Generic.IEnumerable{SolrNet.Impl.ISolrFieldParser})">
      <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldParser" />s
            </summary>
      <param name="parsers">
      </param>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.CollectionFieldParser">
      <summary>
            Parses 1-dimensional fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.DateTimeFieldParser">
      <summary>
            Parses <see cref="T:System.DateTime" /> fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.DecimalFieldParser">
      <summary>
            Parses <see cref="T:System.Decimal" /> fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.DefaultFieldParser">
      <summary>
            Default field parser
            </summary>
    </member>
    <member name="M:SolrNet.Impl.FieldParsers.DefaultFieldParser.#ctor">
      <summary>
            Default field parser
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.DoubleFieldParser">
      <summary>
            Parses double fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.FloatFieldParser">
      <summary>
            Parses float values
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.InferringFieldParser">
      <summary>
            Parser that infers .net type based on solr type
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.IntFieldParser">
      <summary>
            Parses int values
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.LongFieldParser">
      <summary>
            Parses <see cref="T:System.Int64" /> fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.NullableFieldParser">
      <summary>
            Wraps a <see cref="T:SolrNet.Impl.ISolrFieldParser" /> making it support the corresponding <see cref="T:System.Nullable`1" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldParsers.TypeConvertingFieldParser">
      <summary>
            Parses using <see cref="T:System.ComponentModel.TypeConverter" /></summary>
    </member>
    <member name="M:SolrNet.Impl.FieldParsers.TypeConvertingFieldParser.GetUnderlyingType(System.Xml.Linq.XElement,System.Type)">
      <summary>
            Gets the corresponding CLR Type to a solr type
            </summary>
      <param name="field">
      </param>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.AggregateFieldSerializer">
      <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldSerializer" />s
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.BoolFieldSerializer">
      <summary>
            Parses bool values
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.CollectionFieldSerializer">
      <summary>
              Serializes 1-dimensional collections
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.DateTimeFieldSerializer">
      <summary>
            Serializes datetime fields
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.DefaultFieldSerializer">
      <summary>
            Aggregates the default <see cref="T:SolrNet.Impl.ISolrFieldSerializer" />s
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.FormattableFieldSerializer">
      <summary>
            Serializes objects that implement <see cref="T:System.IFormattable" /></summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer">
      <summary>
            Serializes <see cref="T:System.Collections.Generic.IDictionary`2" /> properties
            </summary>
    </member>
    <member name="M:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer.KVKey(System.Object)">
      <summary>
            Gets the key from a <see cref="T:System.Collections.Generic.KeyValuePair`2" /></summary>
      <param name="kv">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer.KVValue(System.Object)">
      <summary>
            Gets the value from a <see cref="T:System.Collections.Generic.KeyValuePair`2" /></summary>
      <param name="kv">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.NullableFieldSerializer">
      <summary>
            Wraps a <see cref="T:SolrNet.Impl.ISolrFieldSerializer" /> making it support the corresponding <see cref="T:System.Nullable`1" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.ToStringFieldSerializer">
      <summary>
            Serializes using .ToString()
            </summary>
    </member>
    <member name="M:SolrNet.Impl.FieldSerializers.ToStringFieldSerializer.CanHandleType(System.Type)">
      <summary>
            True if this serializer can handle the type
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.FieldSerializers.TypeConvertingFieldSerializer">
      <summary>
            Serializes using <see cref="T:System.ComponentModel.TypeConverter" />s
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrExtractResponseParser">
      <summary>
            Parses the extract response
            </summary>
    </member>
    <member name="T:SolrNet.Impl.ISolrCache">
      <summary>
            HTTP-level cache for Solr responses
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ISolrCache.Add(SolrNet.Impl.SolrCacheEntity)">
      <summary>
            Adds a Solr response to the cache
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:SolrNet.Impl.ISolrCache.Item(System.String)">
      <summary>
            Gets a cached Solr response. Returns null if there is no cached response for this URL
            </summary>
      <param name="url">Full Solr query URL (including all querystring parameters)</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrDocumentActivator`1">
      <summary>
            Instantiates a new document instance of type <typeparamref name="T" /></summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrDocumentActivator`1.Create">
      <summary>
            Instantiates a new document instance of type <typeparamref name="T" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ISolrDocumentResponseParser`1">
      <summary>
            Parses documents from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ISolrDocumentResponseParser`1.ParseResults(System.Xml.Linq.XElement)">
      <summary>
            Parses documents from query response
            </summary>
      <param name="parentNode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Impl.ISolrQueryByRange.Inclusive">
      <summary>
            Is lower and upper bound inclusive
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ISolrQueryByRange.InclusiveFrom">
      <summary>
            Is lower bound <see cref="P:SolrNet.Impl.ISolrQueryByRange.From" /> inclusive
            ONLY available in Solr 4.0+
            </summary>
    </member>
    <member name="P:SolrNet.Impl.ISolrQueryByRange.InclusiveTo">
      <summary>
            Is upper bound <see cref="P:SolrNet.Impl.ISolrQueryByRange.To" /> inclusive
            ONLY available in Solr 4.0+
            </summary>
    </member>
    <member name="T:SolrNet.Impl.NullCache">
      <summary>
            Cache implementation that doesn't cache anything.
            Use it when you want to disable http caching.
            </summary>
    </member>
    <member name="T:SolrNet.Impl.PropertyNode">
      <summary>
            Models a XML node for update consumption
            </summary>
    </member>
    <member name="P:SolrNet.Impl.PropertyNode.FieldValue">
      <summary>
            Serialized field value
            </summary>
    </member>
    <member name="P:SolrNet.Impl.PropertyNode.FieldNameSuffix">
      <summary>
            Optional field name suffix
            </summary>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.ExtractResponseParser.ParseMetadata(System.Xml.Linq.XDocument)">
            Metadata looks like this:
            <response><lst name="null_metadata"><arr name="stream_source_info"><null /></arr><arr name="nbTab"><str>10</str></arr><arr name="date"><str>2009-06-24T15:25:00</str></arr></lst></response></member>
    <member name="T:SolrNet.Impl.ResponseParsers.CollapseResponseParser`1">
      <summary>
            Parses collapse_counts from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.CollapseResponseParser`1.ParseCollapsedResults(System.Xml.Linq.XElement)">
      <summary>
            Parses collapsed document.ids and their counts
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1">
      <summary>
            Parses facets from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetQueries(System.Xml.Linq.XElement)">
      <summary>
            Parses facet queries results
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetFields(System.Xml.Linq.XElement)">
      <summary>
            Parses facet fields results
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetDates(System.Xml.Linq.XElement)">
      <summary>
            Parses facet dates results
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetPivots(System.Xml.Linq.XElement)">
      <summary>
            Parses facet pivot results
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.HeaderResponseParser`1">
      <summary>
            Parses header (status, QTime, etc) from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.HeaderResponseParser`1.ParseHeader(System.Xml.Linq.XElement)">
      <summary>
            Parses response header
            </summary>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1">
      <summary>
            Parses highlighting results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1.ParseHighlighting(System.Collections.Generic.IEnumerable{`0},System.Xml.Linq.XElement)">
      <summary>
            Parses highlighting results
            </summary>
      <param name="results">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1.ParseHighlightingFields(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
            Parse highlighting snippets for each field.
            </summary>
      <param name="nodes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.MoreLikeThisResponseParser`1">
      <summary>
            Parses more-like-this results from a query response
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.MoreLikeThisResponseParser`1.ParseMoreLikeThis(System.Collections.Generic.IEnumerable{`0},System.Xml.Linq.XElement)">
      <summary>
            Parses more-like-this results
            </summary>
      <param name="results">
      </param>
      <param name="node">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.ResultsResponseParser`1">
      <summary>
            Parses documents from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.SpellCheckResponseParser`1">
      <summary>
            Parses spell-checking results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.SpellCheckResponseParser`1.ParseSpellChecking(System.Xml.Linq.XElement)">
      <summary>
            Parses spell-checking results
            </summary>
      <param name="node">SpellCheck node</param>
      <returns>List of suggestions and collations</returns>
    </member>
    <member name="T:SolrNet.Impl.ResponseParsers.StatsResponseParser`1">
      <summary>
            Parses stats results from a query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.ResponseParsers.StatsResponseParser`1.ParseStats(System.Xml.Linq.XElement,System.String)">
      <summary>
            Parses the stats results and uses recursion to get any facet results
            </summary>
      <param name="node">
      </param>
      <param name="selector">Start with 'stats_fields'</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Impl.HttpRuntimeCache">
      <summary>
            Uses the HttpRuntime (ASP.NET) cache
            </summary>
    </member>
    <member name="P:SolrNet.Impl.HttpRuntimeCache.SlidingMinutes">
      <summary>
            Cache sliding minutes. By default 10 minutes
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrCacheEntity">
      <summary>
            HTTP-level Solr cache entry
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrCacheEntity.#ctor(System.String,System.String,System.String)">
      <summary>
            HTTP-level Solr cache entry
            </summary>
      <param name="url">Full Solr query URL</param>
      <param name="eTag">Response ETag</param>
      <param name="data">Response data</param>
    </member>
    <member name="P:SolrNet.Impl.SolrCacheEntity.Url">
      <summary>
            Full Solr query URL
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrCacheEntity.ETag">
      <summary>
            Response ETag
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrCacheEntity.Data">
      <summary>
            Response data
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrDictionaryDocumentResponseParser">
      <summary>
            Parses a solr result into a dictionary of (string, object)
            </summary>
    </member>
    <member name="T:SolrNet.ISolrDocumentSerializer`1">
      <summary>
            Serializes a solr document to xml. 
            </summary>
      <typeparam name="T">document type</typeparam>
    </member>
    <member name="M:SolrNet.ISolrDocumentSerializer`1.Serialize(`0,System.Nullable{System.Double})">
      <summary>
            Serializes a Solr document to xml, applying an index-time boost
            </summary>
      <param name="doc">document to serialize</param>
      <param name="boost">
      </param>
      <returns>serialized document</returns>
    </member>
    <member name="T:SolrNet.Impl.SolrDictionarySerializer">
      <summary>
            Serializes a dictionary document
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrDocumentActivator`1">
      <summary>
            Creates a new instance of document type <typeparamref name="T" /> using <see cref="T:System.Activator" /></summary>
      <typeparam name="T">document type</typeparam>
    </member>
    <member name="T:SolrNet.Impl.SolrDocumentResponseParser`1">
      <summary>
            Parses documents from query response
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.SolrDocumentResponseParser`1.ParseResults(System.Xml.Linq.XElement)">
      <summary>
            Parses documents results
            </summary>
      <param name="parentNode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrDocumentResponseParser`1.ParseDocument(System.Xml.Linq.XElement)">
      <summary>
            Builds a document from the corresponding response xml node
            </summary>
      <param name="node">response xml node</param>
      <param name="fields">document fields</param>
      <returns>populated document</returns>
    </member>
    <member name="T:SolrNet.Impl.SpellCheckResult">
      <summary>
            Spell-checking results
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResult.Query">
      <summary>
            Original query term
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResult.NumFound">
      <summary>
            Result count for original term
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResult.StartOffset">
      <summary>
            Start offset
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResult.EndOffset">
      <summary>
            End offset
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResult.Suggestions">
      <summary>
            Spelling suggestions
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SpellCheckResults">
      <summary>
            Spell-checking query results
            </summary>
    </member>
    <member name="F:SolrNet.Impl.SpellCheckResults.Collations">
      <summary>
            Multiple collations returned
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SpellCheckResults.Collation">
      <summary>
            Suggestion query from spell-checking
            </summary>
    </member>
    <member name="T:SolrNet.LocalParams">
      <summary>
            Provides a way to "localize" information about a specific argument that is being sent to Solr. 
            In other words, it provides a way to add meta-data to certain argument types such as query strings.
            </summary>
      <see href="http://wiki.apache.org/solr/LocalParams" />
    </member>
    <member name="T:SolrNet.LocalParams.LocalParamsQuery">
      <summary>
            Query object from a query + local params
            </summary>
    </member>
    <member name="M:SolrNet.LocalParams.LocalParamsQuery.#ctor(SolrNet.ISolrQuery,SolrNet.LocalParams)">
      <summary>
            Query object from a query + local params
            </summary>
      <param name="query">
      </param>
      <param name="local">
      </param>
    </member>
    <member name="P:SolrNet.LocalParams.LocalParamsQuery.Query">
      <summary>
            Query part
            </summary>
    </member>
    <member name="P:SolrNet.LocalParams.LocalParamsQuery.Local">
      <summary>
            Local params part
            </summary>
    </member>
    <member name="M:SolrNet.LocalParams.#ctor">
      <summary>
            New local params
            </summary>
    </member>
    <member name="M:SolrNet.LocalParams.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            New local params from dictionary
            </summary>
      <param name="dictionary">
      </param>
    </member>
    <member name="T:SolrNet.IReadOnlyMappingManager">
      <summary>
            Service interface for mapping Solr fields to object properties
            </summary>
    </member>
    <member name="M:SolrNet.IReadOnlyMappingManager.GetFields(System.Type)">
      <summary>
            Gets fields mapped for this type
            </summary>
      <param name="type">
      </param>
      <returns>Empty collection if <paramref name="type" /> is not mapped</returns>
    </member>
    <member name="M:SolrNet.IReadOnlyMappingManager.GetUniqueKey(System.Type)">
      <summary>
            Gets unique key for the type
            </summary>
      <param name="type">
      </param>
      <returns>Null if type has no unique key defined</returns>
    </member>
    <member name="M:SolrNet.IReadOnlyMappingManager.GetRegisteredTypes">
      <summary>
            Gets all registered document types in this mapping manager
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Mapping.AllPropertiesMappingManager">
      <summary>
            Maps all properties in the class, with the same field name as the property.
            Note that unique keys must be added manually.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.AllPropertiesMappingManager.SetUniqueKey(System.Reflection.PropertyInfo)">
      <summary>
            Sets the property that acts as unique key for a document type
            </summary>
      <param name="property">Unique key property</param>
    </member>
    <member name="T:SolrNet.Mapping.AttributesMappingManager">
      <summary>
            Gets mapping info from attributes like <see cref="T:SolrNet.Attributes.SolrFieldAttribute" /> and <see cref="T:SolrNet.Attributes.SolrUniqueKeyAttribute" /></summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.HighlightingParameters">
      <summary>
            Highlighting parameters
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Fields">
      <summary>
            List of fields to generate highlighted snippets for. 
            If left blank, the fields highlighted for the StandardRequestHandler are the defaultSearchField (or the df param if used) 
            and for the DisMaxRequestHandler the qf fields are used. 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Snippets">
      <summary>
            The maximum number of highlighted snippets to generate per field. 
            It is possible for any number of snippets from zero to this value to be generated.
            If left null, it will use whatever default Solr sets (1 for Solr 1.3)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Fragsize">
      <summary>
            The size, in characters, of fragments to consider for highlighting. 
            0 indicates that the whole field value should be used (no fragmenting). 
            If left null, it will use whatever default Solr sets (100 for Solr 1.3)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RequireFieldMatch">
      <summary>
            If true, then a field will only be highlighted if the query matched in this particular field (normally, terms are highlighted in all requested fields regardless of which field matched the query).
            If left null, it will use whatever default Solr sets (false for Solr 1.3)
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.AlternateField">
      <summary>
            If a snippet cannot be generated (due to no terms matching), you can specify a field to use as the backup/default summary.
            The default value is to not have a default summary. 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.BeforeTerm">
      <summary>
            The text which appears before a highlighted term.
            The default value is "&lt;em&gt;"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.AfterTerm">
      <summary>
            The text which appears after a highlighted term.
            The default value is "&lt;/em&gt;"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Query">
      <summary>
            Set a query request to be highlighted. It overrides q parameter for highlighting. 
            Requires Solr 3.5+".
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexSlop">
      <summary>
            Factor by which the regex fragmenter can stray from the ideal fragment size (given by hl.fragsize) to accomodate the regular expression. 
            For instance, a slop of 0.2 with fragsize of 100 should yield fragments between 80 and 120 characters in length. 
            It is usually good to provide a slightly smaller fragsize when using the regex fragmenter. 
            The default value is ".6"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexPattern">
      <summary>
            The regular expression for fragmenting. 
            This could be used to extract sentences
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexMaxAnalyzedChars">
      <summary>
            Only analyze this many characters from a field when using the regex fragmenter (after which, the fragmenter produces fixed-sized fragments). 
            Applying a complicated regex to a huge field is expensive.
            The default value is "10000". 
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.MergeContiguous">
      <summary>
            Collapse contiguous fragments into a single fragment. "true" indicates contiguous fragments will be collapsed into single fragment. This parameter makes sense for Highlighter only.
            The default value is "false", which is also the backward-compatible setting.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.UsePhraseHighlighter">
      <summary>
            Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document. Default value is "false".
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.UseFastVectorHighlighter">
      <summary>
            Uses FastVectorHighlighter (Solr 3.1+). FastVectorHighlighter requires the field is termVectors=on, termPositions=on and termOffsets=on.
            The default value is "false"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.HighlightMultiTerm">
      <summary>
            If the SpanScorer is also being used, enables highlighting for range/wildcard/fuzzy/prefix queries. This parameter makes sense for Highlighter only.
            The default is "false"
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.MaxAnalyzedChars">
      <summary>
            How many characters into a document to look for suitable snippets. This parameter makes sense for Highlighter only.
            The default value is "51200".
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.MaxAlternateFieldLength">
      <summary>
            If hl.alternateField is specified, this parameter specifies the maximum number of characters of the field to return. Any value less than or equal to 0 means unlimited.
            The default value is unlimited.
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Fragmenter">
      <summary>
            Specify a text snippet generator for highlighted text.
            This parameter makes sense for Highlighter only.
            The default value is "gap".
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.SolrHighlightFragmenter">
      <summary>
             Different types of fragmenter used when highlighting.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.SolrHighlightFragmenter.Gap">
      <summary>
            Creates fixed-sized fragments with gaps for multi-valued fields.
            </summary>
    </member>
    <member name="F:SolrNet.Commands.Parameters.SolrHighlightFragmenter.Regex">
      <summary>
            Create fragments that "look like" a certain regular expression. 
            </summary>
    </member>
    <member name="T:SolrNet.Commands.Parameters.CommitOptions">
      <summary>
            Commit/optimize options
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommitOptions.WaitSearcher">
      <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommitOptions.WaitFlush">
      <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommitOptions.MaxSegments">
      <summary>
            Optimizes down to at most this number of segments
            Default is 1
            </summary>
      <remarks>Requires Solr 1.3</remarks>
    </member>
    <member name="P:SolrNet.Commands.Parameters.CommitOptions.ExpungeDeletes">
      <summary>
            Merge segments with deletes away
            </summary>
      <remarks>Requires Solr 1.4</remarks>
    </member>
    <member name="T:SolrNet.Commands.PingCommand">
      <summary>
            Pings the Solr server.
            It can be used by a load balancer in front of a set of Solr servers to check response time of all the Solr servers in order to do response time based load balancing.
            </summary>
      <seealso href="http://wiki.apache.org/solr/SolrConfigXml" />
    </member>
    <member name="T:SolrNet.Commands.AddCommand`1">
      <summary>
            Adds / updates documents to solr
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Commands.AddCommand`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}},SolrNet.ISolrDocumentSerializer{`0},SolrNet.AddParameters)">
      <summary>
            Adds / updates documents to solr
            </summary>
      <param name="documents">
      </param>
      <param name="serializer">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="M:SolrNet.Commands.AddCommand`1.ConvertToXml">
      <summary>
            Removes UTF control characters, not valid in XML
            </summary>
      <param name="xml">
      </param>
      <returns>
      </returns>
      <seealso href="http://cse-mjmcl.cse.bris.ac.uk/blog/2007/02/14/1171465494443.html#comment1221120563572" />
      <summary>
            Serializes command to Solr XML
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Commands.CommitCommand">
      <summary>
            Commits updates
            </summary>
    </member>
    <member name="P:SolrNet.Commands.CommitCommand.WaitFlush">
      <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.CommitCommand.WaitSearcher">
      <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.CommitCommand.ExpungeDeletes">
      <summary>
            Merge segments with deletes away
            Default is false
            </summary>
    </member>
    <member name="P:SolrNet.Commands.CommitCommand.MaxSegments">
      <summary>
            Optimizes down to, at most, this number of segments
            Default is 1
            </summary>
    </member>
    <member name="T:SolrNet.Commands.DeleteCommand">
      <summary>
            Deletes document(s), either by id or by query
            </summary>
    </member>
    <member name="P:SolrNet.Commands.DeleteCommand.FromPending">
      <summary>
            Deprecated in Solr 1.3
            </summary>
    </member>
    <member name="P:SolrNet.Commands.DeleteCommand.FromCommitted">
      <summary>
            Deprecated in Solr 1.3
            </summary>
    </member>
    <member name="T:SolrNet.Commands.OptimizeCommand">
      <summary>
            Optimizes Solr's index
            </summary>
      <seealso href="http://wiki.apache.org/jakarta-lucene/LuceneFAQ">Lucene FAQ</seealso>
    </member>
    <member name="M:SolrNet.Commands.OptimizeCommand.Execute(SolrNet.ISolrConnection)">
      <summary>
            Executes this command
            </summary>
      <param name="connection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Commands.OptimizeCommand.WaitFlush">
      <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.OptimizeCommand.WaitSearcher">
      <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
    </member>
    <member name="P:SolrNet.Commands.OptimizeCommand.ExpungeDeletes">
      <summary>
            Merge segments with deletes away
            Default is false
            </summary>
    </member>
    <member name="P:SolrNet.Commands.OptimizeCommand.MaxSegments">
      <summary>
            Optimizes down to, at most, this number of segments
            Default is 1
            </summary>
    </member>
    <member name="T:SolrNet.Exceptions.InvalidFieldException">
      <summary>
            Solr did not understand one the specified fields
            </summary>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidFieldException.#ctor(System.Exception)">
      <summary>
            Solr did not understand one the specified fields
            </summary>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidFieldException.#ctor(System.String)">
      <summary>
            Solr did not understand one the specified fields
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidFieldException.#ctor(System.String,System.Exception)">
      <summary>
            Solr did not understand one the specified fields
            </summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidFieldException.#ctor">
      <summary>
            Solr did not understand one the specified fields
            </summary>
    </member>
    <member name="T:SolrNet.Exceptions.InvalidSortOrderException">
      <summary>
            Error parsing <see cref="T:SolrNet.SortOrder" /></summary>
    </member>
    <member name="T:SolrNet.Exceptions.SolrConnectionException">
      <summary>
            Error connecting to Solr. See inner exception for more information.
            </summary>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor(System.String)">
      <summary>
            Error connecting to Solr.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor(System.Exception)">
      <summary>
            Error connecting to Solr.
            </summary>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor(System.Exception,System.String)">
      <summary>
            Error connecting to Solr.
            </summary>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor(System.String,System.Exception)">
      <summary>
            Error connecting to Solr.
            </summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor(System.String,System.Exception,System.String)">
      <summary>
            Error connecting to Solr.
            </summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.SolrConnectionException.#ctor">
      <summary>
            Error connecting to Solr.
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.IMappingManager">
      <summary>
            Mapping manager abstraction
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo)">
      <summary>
            Maps a property with the property name as Solr field name
            </summary>
      <param name="property">Document type property</param>
    </member>
    <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo,System.String)">
      <summary>
            Maps a property
            </summary>
      <param name="property">Document type property</param>
      <param name="fieldName">Solr field name</param>
    </member>
    <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo,System.String,System.Nullable{System.Single})">
      <summary>
            Maps a property
            </summary>
      <param name="property">Document type property</param>
      <param name="fieldName">Solr field name</param>
      <param name="boost">Index-time boosting</param>
    </member>
    <member name="M:SolrNet.Mapping.IMappingManager.SetUniqueKey(System.Reflection.PropertyInfo)">
      <summary>
            Sets unique key for a document type
            </summary>
      <param name="property">Document type property</param>
    </member>
    <member name="T:SolrNet.ISolrBasicReadOnlyOperations`1">
      <summary>
            Read-only operations without convenience overloads
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.Query(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes a query
            </summary>
      <param name="query">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.MoreLikeThis(SolrNet.SolrMLTQuery,SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions)">
      <summary>
            Executes a MoreLikeThisHandler query
            </summary>
      <param name="query">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.Ping">
      <summary>
            Pings the Solr server.
            It can be used by a load balancer in front of a set of Solr servers to check response time of all the Solr servers in order to do response time based load balancing.
            See http://wiki.apache.org/solr/SolrConfigXml for more information.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.GetSchema(System.String)">
      <summary>
            Gets the schema.
            </summary>
      <param name="schemaFileName">Name of the schema file.</param>
      <returns> Solr schema </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.GetDIHStatus(System.Collections.Generic.KeyValuePair{System.String,System.String})">
      <summary>
            Gets the current status of the DataImportHandler.
            </summary>
      <returns>DIH status</returns>
    </member>
    <member name="T:SolrNet.ISolrBasicOperations`1">
      <summary>
            Solr operations without convenience overloads
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Commit(SolrNet.Commands.Parameters.CommitOptions)">
      <summary>
            Commits posted documents
            </summary>
      <param name="options">Commit options</param>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Optimize(SolrNet.Commands.Parameters.CommitOptions)">
      <summary>
            Optimizes Solr's index
            </summary>
      <param name="options">Optimization options</param>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Rollback">
      <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.AddWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}},SolrNet.AddParameters)">
      <summary>
            Adds / updates several documents with index-time boost
            </summary>
      <param name="docs">
      </param>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Extract(SolrNet.ExtractParameters)">
      <summary>
            Adds / updates the extracted contents of a richdocument
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.ISolrQuery,SolrNet.DeleteParameters)">
      <summary>
            Deletes all documents that match the given id's or the query
            </summary>
      <param name="ids">document ids to delete</param>
      <param name="q">query to match</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.Send(SolrNet.ISolrCommand)">
      <summary>
            Sends a custom command
            </summary>
      <param name="cmd">command to send</param>
      <returns>solr response</returns>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.SendAndParseHeader(SolrNet.ISolrCommand)">
      <summary>
            Sends a custom command, returns parsed header from xml response
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrBasicOperations`1.SendAndParseExtract(SolrNet.ISolrCommand)">
      <summary>
            Sends a custom command, returns parsed extract response from xml response
            </summary>
      <param name="cmd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.ISolrQueryExecuter`1">
      <summary>
            Executable query
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.ISolrQueryExecuter`1.Execute(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes the query and returns results
            </summary>
      <returns>query results</returns>
    </member>
    <member name="T:SolrNet.ISolrReadOnlyOperations`1">
      <summary>
            Read-only operations
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String)">
      <summary>
            Executes a query
            </summary>
      <param name="q">query to execute</param>
      <returns>query results</returns>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(SolrNet.ISolrQuery)">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(SolrNet.ISolrQuery,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <param name="query">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrReadOnlyOperations`1.FacetFieldQuery(SolrNet.SolrFacetFieldQuery)">
      <summary>
            Executes a single facet field query
            </summary>
      <param name="facets">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.ISolrOperations`1">
      <summary>
            Consolidating interface, exposes all operations
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Commit">
      <summary>
            Commits posted documents, 
            blocking until index changes are flushed to disk and
            blocking until a new searcher is opened and registered as the main query searcher, making the changes visible.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Rollback">
      <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Optimize">
      <summary>
            Optimizes Solr's index
            </summary>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Add(`0)">
      <summary>
            Adds / updates a document
            </summary>
      <param name="doc">document to add/update</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Add(`0,SolrNet.AddParameters)">
      <summary>
            Adds / updates a document with parameters
            </summary>
      <param name="doc">The document to add/update.</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(`0,System.Double)">
      <summary>
            Adds / updates a document with index-time boost
            </summary>
      <param name="doc">
      </param>
      <param name="boost">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(`0,System.Double,SolrNet.AddParameters)">
      <summary>
            Adds / updates a document with index-time boost and add parameters
            </summary>
      <param name="doc">The document to add/update.</param>
      <param name="boost">The index-time boost to apply.</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Extract(SolrNet.ExtractParameters)">
      <summary>
            Adds / updates the extracted content of a richdocument
            </summary>
      <param name="parameters">The extracttion parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Add(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds / updates several documents at once
            </summary>
      <param name="docs">documents to add/update</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds / updates several documents at once
            </summary>
      <param name="docs">documents to add/update</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Add(System.Collections.Generic.IEnumerable{`0},SolrNet.AddParameters)">
      <summary>
            Adds / updates several documents at once
            </summary>
      <param name="docs">documents to add/update</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddRange(System.Collections.Generic.IEnumerable{`0},SolrNet.AddParameters)">
      <summary>
            Adds / updates several documents at once
            </summary>
      <param name="docs">documents to add/update</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}})">
      <summary>
            Adds / updates documents with index-time boost
            </summary>
      <param name="docs">List of docs / boost. If boost is null, no boost is applied</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddRangeWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}})">
      <summary>
            Adds / updates documents with index-time boost
            </summary>
      <param name="docs">List of docs / boost. If boost is null, no boost is applied</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}},SolrNet.AddParameters)">
      <summary>
            Adds / updates documents with index-time boost and add parameters
            </summary>
      <param name="docs">List of docs / boost. If boost is null, no boost is applied</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.AddRangeWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}},SolrNet.AddParameters)">
      <summary>
            Adds / updates documents with index-time boost and add parameters
            </summary>
      <param name="docs">List of docs / boost. If boost is null, no boost is applied</param>
      <param name="parameters">The add parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(`0)">
      <summary>
            Deletes a document (requires the document to have a unique key defined with non-null value)
            </summary>
      <param name="doc">document to delete</param>
      <returns>
      </returns>
      <exception cref="T:SolrNet.Exceptions.SolrNetException">throws if document type doesn't have a unique key or document has null unique key</exception>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(`0,SolrNet.DeleteParameters)">
      <summary>
            Deletes a document (requires the document to have a unique key defined with non-null value)
            </summary>
      <param name="doc">document to delete</param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
      <exception cref="T:SolrNet.Exceptions.SolrNetException">throws if document type doesn't have a unique key or document has null unique key</exception>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Deletes several documents (requires the document type to have a unique key defined with non-null value)
            </summary>
      <param name="docs">
      </param>
      <returns>
      </returns>
      <exception cref="T:SolrNet.Exceptions.SolrNetException">throws if document type doesn't have a unique key or document has null unique key</exception>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{`0},SolrNet.DeleteParameters)">
      <summary>
            Deletes several documents (requires the document type to have a unique key defined with non-null value)
            </summary>
      <param name="docs">
      </param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
      <exception cref="T:SolrNet.Exceptions.SolrNetException">throws if document type doesn't have a unique key or document has null unique key</exception>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(SolrNet.ISolrQuery)">
      <summary>
            Deletes all documents that match a query
            </summary>
      <param name="q">query to match</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(SolrNet.ISolrQuery,SolrNet.DeleteParameters)">
      <summary>
            Deletes all documents that match a query
            </summary>
      <param name="q">query to match</param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.String)">
      <summary>
            Deletes a document by its id (unique key)
            </summary>
      <param name="id">document key</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.String,SolrNet.DeleteParameters)">
      <summary>
            Deletes a document by its id (unique key)
            </summary>
      <param name="id">document key</param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Deletes several documents by their id (unique key)
            </summary>
      <param name="ids">document unique keys</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.DeleteParameters)">
      <summary>
            Deletes several documents by their id (unique key)
            </summary>
      <param name="ids">document unique keys</param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.ISolrQuery)">
      <summary>
            Deletes all documents that match the given id's or the query
            </summary>
      <param name="ids">document unique keys</param>
      <param name="q">query to match</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.ISolrQuery,SolrNet.DeleteParameters)">
      <summary>
            Deletes all documents that match the given id's or the query
            </summary>
      <param name="ids">document unique keys</param>
      <param name="q">query to match</param>
      <param name="parameters">The delete parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.BuildSpellCheckDictionary">
      <summary>
            Create the dictionary for use by the SolrSpellChecker. 
            In typical applications, one needs to build the dictionary before using it. 
            However, it may not always be necessary as it is possible to setup the spellchecker with a dictionary that already exists.
            </summary>
    </member>
    <member name="M:SolrNet.ISolrOperations`1.EnumerateValidationResults">
      <summary>
             Validates the mapping of the type T against the Solr schema XML document.
            </summary>
      <returns>
             A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects containing warnings and error found validating
             the type's mapping against the Solr schema if any.</returns>
    </member>
    <member name="T:SolrNet.Mapping.MappingManager">
      <summary>
            Manual mapping manager
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.MappingManager.GetFields(System.Type)">
      <summary>
            Gets all the SolrFieldModels mapped for this type
            </summary>
      <param name="type">Document type</param>
      <returns>Null if <paramref name="type" /> is not mapped</returns>
    </member>
    <member name="T:SolrNet.Mapping.MemoizingMappingManager">
      <summary>
            Memoizing decorator for a mapping manager
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.MemoizingMappingManager.GetFields(System.Type)">
      <summary>
            Gets fields mapped for this type
            </summary>
      <param name="type">
      </param>
      <returns>Null if <paramref name="type" /> is not mapped</returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.ISolrFieldTypeChecker">
      <summary>
            Validates a mapped document property against a Solr field type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.ISolrFieldTypeChecker.Validate(SolrNet.Schema.SolrFieldType,System.String,System.Type)">
      <summary>
            Validates a mapped document property against a Solr field type
            </summary>
      <param name="solrFieldType">
      </param>
      <param name="propertyName">
      </param>
      <param name="propertyType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.AbstractSolrFieldTypeChecker">
      <summary>
            Abstract schema type checker. Uses a list of "safe" types and a list of "warning" types
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.AbstractSolrFieldTypeChecker.CanHandleType(System.Type)">
      <summary>
            Returns true if this type checked can handle <paramref name="propertyType" /></summary>
      <param name="propertyType">Type to check if this checker can handle</param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.IValidationRule">
      <summary>
            Provides a interface to schema mapping validation rules.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.IValidationRule.Validate(System.Type,SolrNet.Schema.SolrSchema,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Validates the specified solr schema.
            </summary>
      <param name="propertyType">The type which mappings will be validated.</param>
      <param name="solrSchema">The solr schema.</param>
      <param name="mappingManager">The mapping manager.</param>
      <returns>A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with any issues found during validation.</returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.MappedPropertiesIsInSolrSchemaRule">
      <summary>
            Represents a rule validation that all properties in the mapping are present in the Solr schema
            as either a SolrField or a DynamicField
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.MappedPropertiesIsInSolrSchemaRule.Validate(System.Type,SolrNet.Schema.SolrSchema,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Validates that all properties in the mapping are present in the Solr schema
            as either a SolrField or a DynamicField
            </summary>
      <param name="documentType">Document type</param>
      <param name="solrSchema">The solr schema.</param>
      <param name="mappingManager">The mapping manager.</param>
      <returns>
            A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with any issues found during validation.
            </returns>
    </member>
    <member name="P:SolrNet.Mapping.Validation.Rules.MappedPropertiesIsInSolrSchemaRule.IgnoredFieldNames">
      <summary>
            Field names to be ignored. These fields are never checked.
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.MultivaluedMappedToCollectionRule">
      <summary>
            Represents a rule that validates that fields mapped to a solr field with mutilvalued set to true
            are of a type that implements <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.MultivaluedMappedToCollectionRule.Validate(System.Type,SolrNet.Schema.SolrSchema,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Validates the specified the mapped document against the solr schema.
            </summary>
      <param name="documentType">Document type</param>
      <param name="solrSchema">The solr schema.</param>
      <param name="mappingManager">The mapping manager.</param>
      <returns>
            A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with any issues found during validation.
            </returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.RequiredFieldsAreMappedRule">
      <summary>
            Represents a rule validating that all SolrFields in the SolrSchema which are required are
            either present in the mapping or as a CopyField.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.RequiredFieldsAreMappedRule.Validate(System.Type,SolrNet.Schema.SolrSchema,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Validates that all SolrFields in the SolrSchema which are required are
            either present in the mapping or as a CopyField.
            </summary>
      <param name="documentType">Document type</param>
      <param name="solrSchema">The solr schema.</param>
      <param name="mappingManager">The mapping manager.</param>
      <returns>
            A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with any issues found during validation.
            </returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.UniqueKeyMatchesMappingRule">
      <summary>
            Validation rule for making sure the uniqueKey mapped in the type is the same as in the Solr schema.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.UniqueKeyMatchesMappingRule.Validate(System.Type,SolrNet.Schema.SolrSchema,SolrNet.IReadOnlyMappingManager)">
      <summary>
            Validates that the uniqueKey mapped in the type is the same as in the Solr schema.
            </summary>
      <param name="documentType">Document type</param>
      <param name="solrSchema">The solr schema.</param>
      <param name="mappingManager">The mapping manager.</param>
      <returns>
            A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with any issues found during validation.
            </returns>
    </member>
    <member name="T:SolrNet.Order">
      <summary>
            Sort order
            </summary>
    </member>
    <member name="F:SolrNet.Order.ASC">
      <summary>
            Ascending sort order
            </summary>
    </member>
    <member name="F:SolrNet.Order.DESC">
      <summary>
            Descending sort order
            </summary>
    </member>
    <member name="T:SolrNet.SortOrder">
      <summary>
            Sorting order
            </summary>
    </member>
    <member name="M:SolrNet.SortOrder.#ctor(System.String)">
      <summary>
             Ctor. Default sort order is ascending.
            </summary>
      <param name="fieldName">The name of the field to sort by.</param>
      <exception cref="T:SolrNet.Exceptions.InvalidSortOrderException">Thrown if field name contains spaces.</exception>
    </member>
    <member name="M:SolrNet.SortOrder.#ctor(System.String,SolrNet.Order)">
      <summary>
             Ctor.
            </summary>
      <param name="fieldName">The name of the field to sort by.</param>
      <param name="order">The <see cref="P:SolrNet.SortOrder.Order">order</see> to sort in (asc/desc).</param>
    </member>
    <member name="M:SolrNet.SortOrder.Parse(System.String)">
      <summary>
            Parses a sort order in format "field (ASC | DESC)".
            E.g. "name desc"
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.SortOrder.FieldName">
      <summary>
            Sort field
            </summary>
    </member>
    <member name="P:SolrNet.SortOrder.Order">
      <summary>
            Sort order
            </summary>
    </member>
    <member name="T:SolrNet.RandomSortOrder">
      <summary>
            Random sorting of results
            Requires Solr 1.3+
            </summary>
    </member>
    <member name="M:SolrNet.RandomSortOrder.#ctor(System.String)">
      <summary>
            Random sorting with random seed
            </summary>
      <param name="fieldName">Random sorting field as defined in schema.xml</param>
    </member>
    <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,SolrNet.Order)">
      <summary>
            Random sorting with random seed, with specified order
            </summary>
      <param name="fieldName">Random sorting field as defined in schema.xml</param>
      <param name="order">Sort order (asc/desc)</param>
    </member>
    <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,System.String)">
      <summary>
            Random sorting with specified seed
            </summary>
      <param name="fieldName">Random sorting field as defined in schema.xml</param>
      <param name="seed">Random seed</param>
    </member>
    <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,System.String,SolrNet.Order)">
      <summary>
            Random sorting with specified seed, with specified order
            </summary>
      <param name="fieldName">Random sorting field as defined in schema.xml</param>
      <param name="seed">Random seed</param>
      <param name="order">Sort order (asc/desc)</param>
    </member>
    <member name="T:SolrNet.ResponseHeader">
      <summary>
            Operation response header
            </summary>
    </member>
    <member name="P:SolrNet.ResponseHeader.Status">
      <summary>
            Result status (0 is OK)
            </summary>
    </member>
    <member name="P:SolrNet.ResponseHeader.QTime">
      <summary>
            Time this operation took in ms
            </summary>
    </member>
    <member name="P:SolrNet.ResponseHeader.Params">
      <summary>
            Parameters defined in this operation
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrDocumentSerializer`1">
      <summary>
            Serializes a Solr document to xml
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="T:SolrNet.Mapping.Validation.IMappingValidator">
      <summary>
            Provides an interface to validation a Solr schema against a type's mapping.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.IMappingValidator.EnumerateValidationResults(System.Type,SolrNet.Schema.SolrSchema)">
      <summary>
            Validates the specified validation rules.
            </summary>
      <param name="documentType">The document type which needs to be validated</param>
      <param name="schema">The Solr schema.</param>
      <returns>A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with the problems found during validation. If Any.</returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.BoolSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Boolean" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.BoolSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.Boolean" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.DateTimeSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.DateTime" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.DateTimeSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.DateTime" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.DecimalSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Decimal" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.DoubleSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Double" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.DoubleSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.Double" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.FloatSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Single" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.FloatSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.Single" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.IntSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Int32" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.IntSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.Int32" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Schema.ISolrSchemaParser">
      <summary>
            Provides an interface to parsing a solr schema xml document into a <see cref="T:SolrNet.Schema.SolrSchema" /> object.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.ISolrSchemaParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the specified solr schema XML.
            </summary>
      <param name="solrSchemaXml">The solr schema XML.</param>
      <returns>a object model of the solr schema.</returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.LongSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.Int64" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.LongSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.Int64" /> type
            </summary>
    </member>
    <member name="T:SolrNet.Schema.SolrCopyField">
      <summary>
            Represents a Solr copy field.
            </summary>
    </member>
    <member name="P:SolrNet.Schema.SolrCopyField.Source">
      <summary>
            Gets or sets the source.
            </summary>
      <value>The source.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrCopyField.Destination">
      <summary>
            Gets or sets the destination.
            </summary>
      <value>The destination.</value>
    </member>
    <member name="T:SolrNet.Schema.SolrDynamicField">
      <summary>
            Represents a Solr dynamic field.
            </summary>
    </member>
    <member name="P:SolrNet.Schema.SolrDynamicField.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:SolrNet.Schema.SolrField">
      <summary>
            Repesents a field in the Solr schema.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.SolrField.#ctor(System.String,SolrNet.Schema.SolrFieldType)">
      <summary>
            Repesents a field in the Solr schema.
            </summary>
      <param name="name">Field name</param>
      <param name="type">Field type</param>
    </member>
    <member name="P:SolrNet.Schema.SolrField.Name">
      <summary>
            Field name
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.IsRequired">
      <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
      <value>
        <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.IsMultiValued">
      <summary>
            Gets or sets a value indicating whether this instance is multi valued.
            </summary>
      <value>
        <c>true</c> if this instance is multi valued; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.IsIndexed">
      <summary>
            Gets or sets a value indicating whether this instance is indexed.
            </summary>
      <value>
        <c>true</c> if this instance is indexed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.IsStored">
      <summary>
            Gets or sets a value indicating whether this instance is stored.
            </summary>
      <value>
        <c>true</c> if this instance is stored; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.IsDocValues">
      <summary>
            Gets or sets a value indicating whether this instance is docValues.
            </summary>
      <value>
        <c>true</c> if this instance is docValues; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SolrNet.Schema.SolrField.Type">
      <summary>
            Field type
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:SolrNet.Schema.SolrFieldType">
      <summary>
            Represents a Solr field type.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.SolrFieldType.#ctor(System.String,System.String)">
      <summary>
            Represents a Solr field type.
            </summary>
      <param name="name">Solr field type name</param>
      <param name="type">Solr field type type (java class name)</param>
    </member>
    <member name="P:SolrNet.Schema.SolrFieldType.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrFieldType.Type">
      <summary>
            Gets or sets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:SolrNet.Schema.SolrSchema">
      <summary>
            Represents a Solr schema.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.SolrSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Schema.SolrSchema" /> class.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.SolrSchema.FindSolrFieldByName(System.String)">
      <summary>
            Finds the solr field by name.
            </summary>
      <param name="name">The name of the solr field to find.</param>
      <returns>The solr field if found. Null otherwise.</returns>
    </member>
    <member name="P:SolrNet.Schema.SolrSchema.SolrFieldTypes">
      <summary>
            Gets or sets the solr fields types.
            </summary>
      <value>The solr fields types.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrSchema.SolrFields">
      <summary>
            Gets or sets the solr fields.
            </summary>
      <value>The solr fields.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrSchema.SolrDynamicFields">
      <summary>
            Gets or sets the solr dynamic fields.
            </summary>
      <value>The solr dynamic fields.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrSchema.SolrCopyFields">
      <summary>
            Gets or sets the solr copy fields.
            </summary>
      <value>The solr copy fields.</value>
    </member>
    <member name="P:SolrNet.Schema.SolrSchema.UniqueKey">
      <summary>
            Gets or sets the unique key.
            </summary>
      <value>The unique key.</value>
    </member>
    <member name="T:SolrNet.Mapping.Validation.ValidationResult">
      <summary>
            Represents a Solr schema mapping validation issue.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.ValidationResult.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="P:SolrNet.Mapping.Validation.ValidationResult.Message">
      <summary>
            Gets the message.
            </summary>
      <value>The message.</value>
    </member>
    <member name="T:SolrNet.Mapping.Validation.ValidationError">
      <summary>
            Represents a Solr schema mapping validation error.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.ValidationError.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Mapping.Validation.ValidationError" /> class.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="T:SolrNet.Mapping.Validation.ValidationWarning">
      <summary>
            Represents a Solr schema mapping validation warning.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.ValidationWarning.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Mapping.Validation.ValidationWarning" /> class.
            </summary>
      <param name="message">The warning message.</param>
    </member>
    <member name="T:SolrNet.Mapping.Validation.MappingValidator">
      <summary>
            Manages the validation of a mapping against a solr schema XML document.
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.MappingValidator.#ctor(SolrNet.IReadOnlyMappingManager,SolrNet.Mapping.Validation.Rules.IValidationRule[])">
      <summary>
            Initializes a new instance of the <see cref="T:SolrNet.Mapping.Validation.MappingValidator" /> class.
            </summary>
      <param name="mappingManager">The mapping manager that is used to map types to and from their Solr representation.</param>
      <param name="rules">Validation rules</param>
    </member>
    <member name="M:SolrNet.Mapping.Validation.MappingValidator.EnumerateValidationResults(System.Type,SolrNet.Schema.SolrSchema)">
      <summary>
            Validates the specified validation rules.
            </summary>
      <param name="documentType">The document type which needs to be validated</param>
      <param name="schema">The Solr schema.</param>
      <returns>A collection of <see cref="T:SolrNet.Mapping.Validation.ValidationResult" /> objects with the problems found during validation. If Any.</returns>
    </member>
    <member name="T:SolrNet.Schema.SolrSchemaParser">
      <summary>
            Parses a Solr schema xml document into a strongly typed
            <see cref="T:SolrNet.Schema.SolrSchema" /> object.
            </summary>
    </member>
    <member name="M:SolrNet.Schema.SolrSchemaParser.Parse(System.Xml.Linq.XDocument)">
      <summary>
            Parses the specified Solr schema xml.
            </summary>
      <param name="solrSchemaXml">The Solr schema xml to parse.</param>
      <returns>A strongly styped representation of the Solr schema xml.</returns>
    </member>
    <member name="T:SolrNet.Mapping.Validation.Rules.StringSolrFieldTypeChecker">
      <summary>
            Checks schema type of properties with <see cref="T:System.String" /> type
            </summary>
    </member>
    <member name="M:SolrNet.Mapping.Validation.Rules.StringSolrFieldTypeChecker.#ctor">
      <summary>
            Checks schema type of properties with <see cref="T:System.String" /> type
            </summary>
    </member>
    <member name="T:SolrNet.SolrFacetDateQuery">
      <summary>
            Date facet query
            <see href="http://wiki.apache.org/solr/SimpleFacetParameters#Date_Faceting_Parameters" /></summary>
    </member>
    <member name="M:SolrNet.SolrFacetDateQuery.#ctor(System.String,System.DateTime,System.DateTime,System.String)">
      <summary>
            Creates a date facet query
            </summary>
      <param name="field">Field to facet</param>
      <param name="start">The lower bound for the first date range for all Date Faceting on this field</param>
      <param name="end">The minimum upper bound for the last date range for all Date Faceting on this field</param>
      <param name="gap">
            The size of each date range expressed as an interval to be added to the lower bound using the DateMathParser syntax.
            <see href="http://lucene.apache.org/solr/api/org/apache/solr/util/DateMathParser.html" /></param>
    </member>
    <member name="P:SolrNet.SolrFacetDateQuery.HardEnd">
      <summary>
            What to do in the event that the gap does not divide evenly between start and end. 
            If this is true, the last date range constraint will have an upper bound of end; 
            if false, the last date range will have the smallest possible upper bound greater then end such that the range is exactly gap wide. 
            The default is false.
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetDateQuery.Other">
      <summary>
            Indicates that in addition to the counts for each date range constraint between start and end, counts should also be computed for other
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetDateQuery.Include">
      <summary>
            By default, the ranges used to compute date faceting between facet.date.start and facet.date.end are all inclusive of both endpoints, while the the "before" and "after" ranges are not inclusive. This behavior can be modified by 
            the facet.date.include param, which can be any combination of the following options...
            </summary>
    </member>
    <member name="T:SolrNet.SolrFacetFieldQuery">
      <summary>
            Facet field query
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Field">
      <summary>
            Facet field
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Prefix">
      <summary>
            Limits the terms on which to facet to those starting with the given string prefix.
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Sort">
      <summary>
            Set to true, this parameter indicates that constraints should be sorted by their count. 
            If false, facets will be in their natural index order (unicode). 
            For terms in the ascii range, this will be alphabetically sorted. 
            The default is true if Limit is greater than 0, false otherwise.
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Limit">
      <summary>
            This param indicates the maximum number of constraint counts that should be returned for the facet fields. 
            A negative value means unlimited. 
            The default value is 100. 
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Offset">
      <summary>
            This param indicates an offset into the list of constraints to allow paging. 
            The default value is 0. 
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.MinCount">
      <summary>
            This param indicates the minimum counts for facet fields should be included in the response.
            The default value is 0.
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.Missing">
      <summary>
            Set to true this param indicates that in addition to the Term based constraints of a facet field, a count of all matching results which have no value for the field should be computed
            Default is false
            </summary>
    </member>
    <member name="P:SolrNet.SolrFacetFieldQuery.EnumCacheMinDf">
      <summary>
            This param indicates the minimum document frequency (number of documents matching a term) for which the filterCache should be used when determining the constraint count for that term. 
            This is only used during the term enumeration method of faceting (field type faceting on multi-valued or full-text fields).
            A value greater than zero will decrease memory usage of the filterCache, but increase the query time. 
            When faceting on a field with a very large number of terms, and you wish to decrease memory usage, try a low value of 25 to 50 first.
            The default value is 0, causing the filterCache to be used for all terms in the field.
            </summary>
    </member>
    <member name="T:SolrNet.SolrFacetQuery">
      <summary>
            Arbitrary facet query
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrQueryExecuter`1">
      <summary>
            Executes queries
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="F:SolrNet.Impl.SolrQueryExecuter`1.ConstDefaultRows">
      <summary>
            When row limit is not defined, this value is used
            </summary>
    </member>
    <member name="F:SolrNet.Impl.SolrQueryExecuter`1.DefaultHandler">
      <summary>
            Default Solr query handler
            </summary>
    </member>
    <member name="F:SolrNet.Impl.SolrQueryExecuter`1.DefaultMoreLikeThisHandler">
      <summary>
            Default Solr handler for More Like This queries
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.#ctor(SolrNet.Impl.ISolrAbstractResponseParser{`0},SolrNet.ISolrConnection,SolrNet.Impl.ISolrQuerySerializer,SolrNet.Impl.ISolrFacetQuerySerializer,SolrNet.Impl.ISolrMoreLikeThisHandlerQueryResultsParser{`0})">
      <summary>
            Constructor
            </summary>
      <param name="resultParser">
      </param>
      <param name="connection">
      </param>
      <param name="querySerializer">
      </param>
      <param name="facetQuerySerializer">
      </param>
      <param name="mlthResultParser">
      </param>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetCommonParameters(SolrNet.Commands.Parameters.CommonQueryOptions)">
      <summary>
            Serializes common query parameters
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetAllParameters(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets Solr parameters for all defined query options
            </summary>
      <param name="Query">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetAllMoreLikeThisHandlerParameters(SolrNet.SolrMLTQuery,SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions)">
      <summary>
            Serializes all More Like This handler parameters
            </summary>
      <param name="query">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetFacetFieldOptions(SolrNet.Commands.Parameters.FacetParameters)">
      <summary>
            Gets Solr parameters for facet queries
            </summary>
      <param name="fp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetMoreLikeThisHandlerParameters(SolrNet.Commands.Parameters.MoreLikeThisHandlerParameters)">
      <summary>
            Serializes More Like This handler specific parameters
            </summary>
      <param name="mlt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetMoreLikeThisParameters(SolrNet.Commands.Parameters.MoreLikeThisParameters)">
      <summary>
            Gets Solr parameters for defined more-like-this options
            </summary>
      <param name="mlt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetFilterQueries(System.Collections.Generic.ICollection{SolrNet.ISolrQuery})">
      <summary>
            Gets Solr parameters for defined filter queries
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetHighlightingParameters(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets Solr parameters for defined highlightings
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetSpellCheckingParameters(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets solr parameters for defined spell-checking
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetStatsQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets the Solr parameters for stats queries
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetCollapseQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets the Solr parameters for collapse queries
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetTermVectorQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets the Solr parameters for collapse queries
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetGroupingQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets the Solr parameters for collapse queries
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetCollapseExpandOptions(SolrNet.Commands.Parameters.CollapseExpandParameters,System.Func{SolrNet.ISolrQuery,System.String})">
      <summary>
            Gets the solr parameters for collapse-expand queries
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetClusteringParameters(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Get the solr parameters for clustering
            </summary>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetTermsParameters(SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Gets solr parameters for terms component
            </summary>
      <param name="Options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.Execute(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes the query and returns results
            </summary>
      <returns>query results</returns>
    </member>
    <member name="M:SolrNet.Impl.SolrQueryExecuter`1.Execute(SolrNet.SolrMLTQuery,SolrNet.Commands.Parameters.MoreLikeThisHandlerQueryOptions)">
      <summary>
            Executes a MoreLikeThis handler query
            </summary>
      <param name="q">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Impl.SolrQueryExecuter`1.DefaultRows">
      <summary>
            When the row count is not defined, use this row count by default
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrQueryExecuter`1.Handler">
      <summary>
            Solr query request handler to use. By default "/select"
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrQueryExecuter`1.MoreLikeThisHandler">
      <summary>
            Solr request handler to use for MoreLikeThis-handler queries. By default "/mlt"
            </summary>
    </member>
    <member name="T:SolrNet.Attributes.SolrFieldAttribute">
      <summary>
            Marks a property as present on Solr. By default the Solr field name is the property name
            </summary>
    </member>
    <member name="M:SolrNet.Attributes.SolrFieldAttribute.#ctor">
      <summary>
            Marks a property as present on Solr. By default the Solr field name is the property name
            </summary>
    </member>
    <member name="M:SolrNet.Attributes.SolrFieldAttribute.#ctor(System.String)">
      <summary>
            Marks a property as present on Solr with the defined Solr field name
            </summary>
      <param name="fieldName">
      </param>
    </member>
    <member name="P:SolrNet.Attributes.SolrFieldAttribute.FieldName">
      <summary>
            Overrides Solr field name
            </summary>
    </member>
    <member name="P:SolrNet.Attributes.SolrFieldAttribute.Boost">
      <summary>
            Adds an index time boost to a field.
            </summary>
    </member>
    <member name="T:SolrNet.SolrFieldModel">
      <summary>
             Represents a Solr field mapping.
            </summary>
    </member>
    <member name="P:SolrNet.SolrFieldModel.Property">
      <summary>
            Class property where the field value is stored
            </summary>
    </member>
    <member name="P:SolrNet.SolrFieldModel.FieldName">
      <summary>
            Named of the field in the Solr schema
            </summary>
    </member>
    <member name="P:SolrNet.SolrFieldModel.Boost">
      <summary>
            Optional index-time field boosting
            </summary>
    </member>
    <member name="T:SolrNet.SolrHasValueQuery">
      <summary>
            Queries documents that have any value in the specified field
            </summary>
    </member>
    <member name="T:SolrNet.SolrMultipleCriteriaQuery">
      <summary>
            Represents several queries as one
            </summary>
    </member>
    <member name="T:SolrNet.SolrMultipleCriteriaQuery.Operator">
      <summary>
            Operator to apply to the included queries
            </summary>
    </member>
    <member name="M:SolrNet.SolrMultipleCriteriaQuery.Create(SolrNet.ISolrQuery[])">
      <summary>
            Static create helper
            </summary>
      <param name="queries">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.SolrMultipleCriteriaQuery.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Static create helper
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="queries">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.SolrMultipleCriteriaQuery.Queries">
      <summary>
            Queries contained in this multiple criteria
            </summary>
    </member>
    <member name="P:SolrNet.SolrMultipleCriteriaQuery.Oper">
      <summary>
            Operator used for joining these queries
            </summary>
    </member>
    <member name="T:SolrNet.SolrNotQuery">
      <summary>
            Negates a query
            </summary>
    </member>
    <member name="M:SolrNet.SolrNotQuery.#ctor(SolrNet.ISolrQuery)">
      <summary>
            Negates a query
            </summary>
      <param name="q">
      </param>
    </member>
    <member name="T:SolrNet.SolrQueryByFieldRegex">
      <summary>
            Queries a field for a value
            </summary>
    </member>
    <member name="M:SolrNet.SolrQueryByFieldRegex.#ctor(System.String,System.String)">
      <summary>
            Queries a field based on a regular expression
            </summary>
      <param name="fieldName">Field name</param>
      <param name="regularExpression">The regular expression.</param>
    </member>
    <member name="P:SolrNet.SolrQueryByFieldRegex.FieldName">
      <summary>
            Gets the name of the field.
            </summary>
      <value>
            The name of the field.
            </value>
    </member>
    <member name="P:SolrNet.SolrQueryByFieldRegex.Expression">
      <summary>
            Gets the regular expression.
            </summary>
      <value>
            The regular expression to be used.
            </value>
    </member>
    <member name="T:SolrNet.SolrRequiredQuery">
      <summary>
            Requires a query
            </summary>
    </member>
    <member name="M:SolrNet.SolrRequiredQuery.#ctor(SolrNet.ISolrQuery)">
      <summary>
            Requires a query
            </summary>
      <param name="q">
      </param>
    </member>
    <member name="T:SolrNet.SolrQuery">
      <summary>
            Basic solr query
            </summary>
    </member>
    <member name="F:SolrNet.SolrQuery.All">
      <summary>
            Represents a query for all documents ("*:*")
            </summary>
    </member>
    <member name="M:SolrNet.SolrQuery.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="query">solr query to execute</param>
    </member>
    <member name="P:SolrNet.SolrQuery.Query">
      <summary>
            query to execute
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryBoost">
      <summary>
            Applies a boost to a query or query fragment
            </summary>
    </member>
    <member name="M:SolrNet.SolrQueryBoost.#ctor(SolrNet.ISolrQuery,System.Double)">
      <summary>
            Applies a boost to a query or query fragment
            </summary>
      <param name="query">Query to boost</param>
      <param name="factor">Boost factor</param>
    </member>
    <member name="P:SolrNet.SolrQueryBoost.Factor">
      <summary>
            Boost factor
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryByField">
      <summary>
            Queries a field for a value
            </summary>
    </member>
    <member name="M:SolrNet.SolrQueryByField.#ctor(System.String,System.String)">
      <summary>
            Queries a field for a value
            </summary>
      <param name="fieldName">Field name</param>
      <param name="fieldValue">Field value</param>
    </member>
    <member name="P:SolrNet.SolrQueryByField.Quoted">
      <summary>
            If true (default), special characters (e.g. '?', '*') in the value are quoted.
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryByRange`1">
      <summary>
            Queries a field for a range
            </summary>
      <typeparam name="RT">
      </typeparam>
    </member>
    <member name="M:SolrNet.SolrQueryByRange`1.#ctor(System.String,`0,`0)">
      <summary>
            Creates an range query with inclusive bounds
            </summary>
      <param name="fieldName">
      </param>
      <param name="from">
      </param>
      <param name="to">
      </param>
    </member>
    <member name="M:SolrNet.SolrQueryByRange`1.#ctor(System.String,`0,`0,System.Boolean)">
      <summary>
            Creates a range query
            </summary>
      <param name="fieldName">
      </param>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="inclusive">Inclusive bounds</param>
    </member>
    <member name="M:SolrNet.SolrQueryByRange`1.#ctor(System.String,`0,`0,System.Boolean,System.Boolean)">
      <summary>
            Creates a range query.
            Different bounds inclusiveness ONLY available in Solr 4.0+
            </summary>
      <param name="fieldName">
      </param>
      <param name="from">
      </param>
      <param name="to">
      </param>
      <param name="inclusiveFrom">Lower bound inclusive</param>
      <param name="inclusiveTo">Upper bound inclusive</param>
    </member>
    <member name="P:SolrNet.SolrQueryByRange`1.Inclusive">
      <summary>
            Is lower and upper bound inclusive
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryByRange`1.InclusiveFrom">
      <summary>
            Is lower bound <see cref="P:SolrNet.SolrQueryByRange`1.From" /> inclusive
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryByRange`1.InclusiveTo">
      <summary>
            Is upper bound <see cref="P:SolrNet.SolrQueryByRange`1.To" /> inclusive
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryInList">
      <summary>
            Queries a field for a list of possible values
            </summary>
    </member>
    <member name="M:SolrNet.SolrQueryInList.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Queries a field for a list of possible values
            </summary>
      <param name="fieldName">Solr field name</param>
      <param name="list">Field values to query</param>
    </member>
    <member name="M:SolrNet.SolrQueryInList.#ctor(System.String,System.String[])">
      <summary>
            Queries a field for a list of possible values
            </summary>
      <param name="fieldName">Solr field name</param>
      <param name="values">Field values to query</param>
    </member>
    <member name="P:SolrNet.SolrQueryInList.FieldName">
      <summary>
            Field name
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryInList.List">
      <summary>
            Field values
            </summary>
    </member>
    <member name="T:SolrNet.SolrQueryResults`1">
      <summary>
            Query results
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Highlights">
      <summary>
            Highlight results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.SpellChecking">
      <summary>
            Spellchecking results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.SimilarResults">
      <summary>
            More-like-this component results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Stats">
      <summary>
            Stats component results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Collapsing">
      <summary>
            Collapse results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.CollapseExpand">
      <summary>
            CollapseExpand results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Clusters">
      <summary>
            Clustering results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Terms">
      <summary>
            TermsComponent results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.TermVectorResults">
      <summary>
            TermVectorComponent results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Grouping">
      <summary>
            Grouping results
            </summary>
    </member>
    <member name="P:SolrNet.SolrQueryResults`1.Debug">
      <summary>
            Debug results
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrBasicServer`1">
      <summary>
            Implements the basic Solr operations
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="T:SolrNet.Attributes.SolrUniqueKeyAttribute">
      <summary>
            Marks a property as unique key. By default the Solr field name is the property name.
            </summary>
    </member>
    <member name="M:SolrNet.Attributes.SolrUniqueKeyAttribute.#ctor">
      <summary>
            Marks a property as unique key. By default the Solr field name is the property name.
            </summary>
    </member>
    <member name="M:SolrNet.Attributes.SolrUniqueKeyAttribute.#ctor(System.String)">
      <summary>
            Marks a property as unique key.
            </summary>
      <param name="fieldName">
      </param>
    </member>
    <member name="T:SolrNet.Impl.SolrServer`1">
      <summary>
            Main component to interact with Solr
            </summary>
      <typeparam name="T">Document type</typeparam>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes a query
            </summary>
      <param name="query">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Query(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Query(System.String,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery)">
      <summary>
            Executes a query
            </summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <param name="query">
      </param>
      <param name="orders">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.FacetFieldQuery(SolrNet.SolrFacetFieldQuery)">
      <summary>
            Executes a facet field query only
            </summary>
      <param name="facet">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Rollback">
      <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.Optimize">
      <summary>
            Commits posts, 
            blocking until index changes are flushed to disk and
            blocking until a new searcher is opened and registered as the main query searcher, making the changes visible.
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrServer`1.GetDIHStatus(System.Collections.Generic.KeyValuePair{System.String,System.String})">
      <summary>
            Gets the DIH Status.
            </summary>
      <param name="options">command options</param>
      <returns>A XmlDocument containing the DIH Status XML.</returns>
    </member>
    <member name="T:SolrNet.StartOrCursor">
      <summary>
            Starting row or cursor mark for pagination
            </summary>
    </member>
    <member name="T:SolrNet.StartOrCursor.Start">
      <summary>
            Starting row for pagination
            </summary>
    </member>
    <member name="M:SolrNet.StartOrCursor.Start.#ctor(System.Int32)">
      <summary>
            Starting row for pagination
            </summary>
      <param name="row">
      </param>
    </member>
    <member name="T:SolrNet.StartOrCursor.Cursor">
      <summary>
            Cursor mark for pagination.
            <see cref="P:SolrNet.Commands.Parameters.QueryOptions.OrderBy" /> must contain at least one unique field.
            Requires Solr 4.7+
            </summary>
    </member>
    <member name="M:SolrNet.StartOrCursor.Cursor.#ctor(System.String)">
      <summary>
            Cursor mark for pagination.
            <see cref="P:SolrNet.Commands.Parameters.QueryOptions.OrderBy" /> must contain at least one unique field.
            Requires Solr 4.7+
            </summary>
      <param name="mark">
      </param>
    </member>
    <member name="T:SolrNet.Startup">
      <summary>
            SolrNet initialization manager
            </summary>
    </member>
    <member name="M:SolrNet.Startup.Init``1(System.String)">
      <summary>
            Initializes SolrNet with the built-in container
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="serverURL">Solr URL (i.e. "http://localhost:8983/solr")</param>
    </member>
    <member name="M:SolrNet.Startup.Init``1(SolrNet.ISolrConnection)">
      <summary>
            Initializes SolrNet with the built-in container
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="connection">
      </param>
    </member>
    <member name="T:SolrNet.StatsResult">
      <summary>
            Stats results
            <see href="http://wiki.apache.org/solr/StatsComponent" /></summary>
    </member>
    <member name="M:SolrNet.StatsResult.#ctor">
      <summary>
            Stats results
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Min">
      <summary>
            Minimum value
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Max">
      <summary>
            Maximum value
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Sum">
      <summary>
            Sum of all values
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Count">
      <summary>
            How many (non-null) values
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Missing">
      <summary>
            How many null values
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.SumOfSquares">
      <summary>
            Sum of all values squared (useful for stddev)
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.Mean">
      <summary>
            The average (v1+v2...+vN)/N
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.StdDev">
      <summary>
            Standard deviation
            </summary>
    </member>
    <member name="P:SolrNet.StatsResult.FacetResults">
      <summary>
            Facet results.
            <list type="bullet"><item>Key is the facet field</item><item>Value is a dictionary where:
            <list type="bullet"><item>Key is the facet value</item><item>Value is the stats for the facet value</item></list></item></list></summary>
    </member>
    <member name="T:SolrNet.Utils.IContainer">
      <summary>
            Interface for the built-in DI container
            </summary>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Register``1(System.Converter{SolrNet.Utils.IContainer,``0})">
      <summary>
            Adds a component implementing <typeparamref name="T" />
            Component key is <typeparamref name="T" />'s <see cref="P:System.Type.FullName" /></summary>
      <typeparam name="T">Service type</typeparam>
      <param name="factory">Component factory method</param>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Register``1(System.String,System.Converter{SolrNet.Utils.IContainer,``0})">
      <summary>
            Adds a component implementing <typeparamref name="T" /> with the specified key
            </summary>
      <typeparam name="T">Service type</typeparam>
      <param name="factory">Component factory method</param>
      <param name="key">Component key</param>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Register(System.String,System.Type,System.Converter{SolrNet.Utils.IContainer,System.Object})">
      <summary>
            Adds a component
            </summary>
      <param name="key">Component key</param>
      <param name="serviceType">Component service type</param>
      <param name="factory">Component factory method. Must return <paramref name="serviceType" /> or a descendant</param>
    </member>
    <member name="M:SolrNet.Utils.IContainer.RemoveAll``1">
      <summary>
            Removes all components with service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Remove``1">
      <summary>
            Removes the default component for service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Remove``1(System.String)">
      <summary>
            Removes the component with key <paramref name="key" /> implementing service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
      <param name="key">Component key</param>
    </member>
    <member name="M:SolrNet.Utils.IContainer.Remove(System.String,System.Type)">
      <summary>
            Removes the component with key <paramref name="key" /> implementing service type <paramref name="serviceType" /></summary>
      <param name="key">Component key</param>
      <param name="serviceType">Service type</param>
    </member>
    <member name="T:SolrNet.Utils.Container">
      <summary>
            Basic built-in dependency-injection container
            </summary>
    </member>
    <member name="M:SolrNet.Utils.Container.#ctor(SolrNet.Utils.Container)">
      <summary>
            Creates a new container copying all components from another container
            </summary>
      <param name="c">
      </param>
    </member>
    <member name="M:SolrNet.Utils.Container.Register``1(System.Converter{SolrNet.Utils.IContainer,``0})">
      <summary>
            Adds a component implementing <typeparamref name="T" />
            Component key is <typeparamref name="T" />'s <see cref="P:System.Type.FullName" /></summary>
      <typeparam name="T">Service type</typeparam>
      <param name="factory">Component factory method</param>
    </member>
    <member name="M:SolrNet.Utils.Container.Register``1(System.String,System.Converter{SolrNet.Utils.IContainer,``0})">
      <summary>
            Adds a component implementing <typeparamref name="T" /> with the specified key
            </summary>
      <typeparam name="T">Service type</typeparam>
      <param name="factory">Component factory method</param>
      <param name="key">Component key</param>
    </member>
    <member name="M:SolrNet.Utils.Container.Register(System.String,System.Type,System.Converter{SolrNet.Utils.IContainer,System.Object})">
      <summary>
            Adds a component
            </summary>
      <param name="key">Component key</param>
      <param name="serviceType">Component service type</param>
      <param name="factory">Component factory method. Must return <paramref name="serviceType" /> or a descendant</param>
    </member>
    <member name="M:SolrNet.Utils.Container.RemoveAll``1">
      <summary>
            Removes all components with service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
    </member>
    <member name="M:SolrNet.Utils.Container.Remove``1">
      <summary>
            Removes the default component for service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
    </member>
    <member name="M:SolrNet.Utils.Container.Remove``1(System.String)">
      <summary>
            Removes the component with key <paramref name="key" /> implementing service type <typeparamref name="T" /></summary>
      <typeparam name="T">Service type</typeparam>
      <param name="key">Component key</param>
    </member>
    <member name="M:SolrNet.Utils.Container.Remove(System.String,System.Type)">
      <summary>
            Removes the component with key <paramref name="key" /> implementing service type <paramref name="serviceType" /></summary>
      <param name="key">Component key</param>
      <param name="serviceType">Service type</param>
    </member>
    <member name="M:SolrNet.Utils.Container.Clear">
      <summary>
            Removes all component registrations from this container
            </summary>
    </member>
    <member name="T:SolrNet.Exceptions.InvalidURLException">
      <summary>
            Invalid URL specified
            </summary>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidURLException.#ctor(System.Exception)">
      <summary>
            Invalid URL specified
            </summary>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidURLException.#ctor(System.String)">
      <summary>
            Invalid URL specified
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidURLException.#ctor(System.String,System.Exception)">
      <summary>
            Invalid URL specified
            </summary>
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="M:SolrNet.Exceptions.InvalidURLException.#ctor">
      <summary>
            Invalid URL specified
            </summary>
    </member>
    <member name="T:SolrNet.Impl.SolrConnection">
      <summary>
            Manages HTTP connection with Solr
            </summary>
    </member>
    <member name="M:SolrNet.Impl.SolrConnection.#ctor(System.String)">
      <summary>
            Manages HTTP connection with Solr
            </summary>
      <param name="serverURL">URL to Solr</param>
    </member>
    <member name="M:SolrNet.Impl.SolrConnection.GetQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>
            Gets the Query 
            </summary>
      <param name="parameters">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrConnection.GetResponse(HttpWebAdapters.IHttpWebRequest)">
      <summary>
            Gets http response, returns (etag, data)
            </summary>
      <param name="request">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Impl.SolrConnection.ReadResponseToString(HttpWebAdapters.IHttpWebResponse)">
      <summary>
            Reads the full stream from the response and returns the content as stream,
            using the correct encoding.
            </summary>
      <param name="response">Web response from request to Solr</param>
      <returns>
      </returns>
    </member>
    <member name="P:SolrNet.Impl.SolrConnection.Cache">
      <summary>
            HTTP cache implementation
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrConnection.HttpWebRequestFactory">
      <summary>
            HTTP request factory
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrConnection.ServerURL">
      <summary>
            URL to Solr
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrConnection.Version">
      <summary>
            Solr XML response syntax version
            </summary>
    </member>
    <member name="P:SolrNet.Impl.SolrConnection.Timeout">
      <summary>
            HTTP connection timeout
            </summary>
    </member>
    <member name="M:SolrNet.Utils.HttpUtility.HtmlDecode(System.String)">
      <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
      <param name="s">The HTML string to decode. </param>
      <returns>The decoded text.</returns>
    </member>
    <member name="M:SolrNet.Utils.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
      <param name="s">The HTML string to decode</param>
      <param name="output">The TextWriter output stream containing the decoded string. </param>
    </member>
    <member name="M:SolrNet.Utils.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
      <param name="s">The string to encode. </param>
      <param name="output">The TextWriter output stream containing the encoded string. </param>
    </member>
    <member name="T:SolrNet.Utils.KV">
      <summary>
            Helper KeyValuePair constructor
            </summary>
    </member>
    <member name="M:SolrNet.Utils.KV.Create``2(``0,``1)">
      <summary>
            Helper KeyValuePair constructor
            </summary>
      <typeparam name="K">
      </typeparam>
      <typeparam name="V">
      </typeparam>
      <param name="key">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Utils.Memoizer">
      <summary>
            Function memoizer
            From http://blogs.msdn.com/wesdyer/archive/2007/01/26/function-memoization.aspx
            </summary>
    </member>
    <member name="M:SolrNet.Utils.Memoizer.Memoize``2(System.Converter{``0,``1})">
      <summary>
            Function memoizer
            From http://blogs.msdn.com/wesdyer/archive/2007/01/26/function-memoization.aspx
            </summary>
    </member>
    <member name="M:SolrNet.Utils.Memoizer.Memoize2``3(System.Func{``0,``1,``2})">
      <summary>
            Memoize a binary function
            </summary>
      <typeparam name="TArg1">
      </typeparam>
      <typeparam name="TArg2">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <param name="function">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SolrNet.Utils.TypeHelper">
      <summary>
        <see cref="T:System.Type" />-related helper functions
            </summary>
    </member>
    <member name="M:SolrNet.Utils.TypeHelper.GetUnderlyingNullableType(System.Type)">
      <summary>
            Returns the underlying type from a nullable type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
      <remarks>
            From http://davidhayden.com/blog/dave/archive/2006/11/26/IsTypeNullableTypeConverter.aspx
            </remarks>
    </member>
    <member name="M:SolrNet.Utils.TypeHelper.IsNullableType(System.Type)">
      <summary>
            Returns true if the argument is a nullable type
            </summary>
      <param name="theType">
      </param>
      <returns>
      </returns>
      <remarks>
            From http://davidhayden.com/blog/dave/archive/2006/11/26/IsTypeNullableTypeConverter.aspx
            </remarks>
    </member>
    <member name="T:SolrNet.Utils.Unit">
      <summary>
            Void as a real, usable type
            </summary>
    </member>
    <member name="T:SolrNet.Utils.F">
      <summary>
            Function helpers
            </summary>
    </member>
    <member name="M:SolrNet.Utils.F.DoNothing``1(``0)">
      <summary>
            Does nothing
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="a">
      </param>
    </member>
    <member name="M:SolrNet.Utils.F.ToFunc``1(System.Action{``0})">
      <summary>
            Converts an <see cref="T:System.Action" /> into a <see cref="!:Func&lt;T,Unit&gt;" />, which is generally more composable
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Utils.F.Func``1(System.Func{``0})">
      <summary>
            Helps C# with type inference
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="f">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SolrNet.Utils.UriValidator.ValidateHTTP(System.String)">
      <summary>
            Validates that <paramref name="s" /> if a valid HTTP / HTTPS URI.
            Otherwise throws <see cref="T:SolrNet.Exceptions.InvalidURLException" /></summary>
      <param name="s">
      </param>
      <returns>
      </returns>
      <exception cref="T:SolrNet.Exceptions.InvalidURLException">
      </exception>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.LimitTo(System.Int32)">
      <summary>
            Maximum number of constraint counts that should be returned for the facet fields. 
            A negative value means unlimited. 
            The default value is 100. 
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.DontSortByCount">
      <summary>
            Set to true, this parameter indicates that constraints should be sorted by their count. 
            If false, facets will be in their natural index order (unicode). 
            For terms in the ascii range, this will be alphabetically sorted. 
            The default is true if Limit is greater than 0, false otherwise.
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.WithPrefix(System.String)">
      <summary>
            Limits the terms on which to facet to those starting with the given string prefix.
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.WithMinCount(System.Int32)">
      <summary>
            Minimum counts for facet fields that should be included in the response.
            The default value is 0.
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.StartingAt(System.Int32)">
      <summary>
            Indicates an offset into the list of constraints to allow paging. 
            The default value is 0. 
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Impl.IDSLFacetFieldOptions`1.IncludeMissing">
      <summary>
            Set to true this param indicates that in addition to the Term based constraints of a facet field, a count of all matching results which have no value for the field should be computed
            Default is false
            </summary>
    </member>
    <member name="T:SolrNet.DSL.Solr">
      <summary>
            Solr DSL Entry point
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Solr.Add``1(``0)">
      <summary>
            Adds/updates a document
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="document">
      </param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Add``1(``0,System.Nullable{System.Double})">
      <summary>
            Adds/updates a document with an optional Boost Value to the entire document.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="document">The document.</param>
      <param name="boostValue">The boost value to apply to the document.</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Add``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds/updates a list of documents
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="documents">
      </param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Add``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Double})">
      <summary>
            Adds/updates a list of documents with an optional Boost Value to all documents specified.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="documents">The documents.</param>
      <param name="boostValue">The boost value to apply to all documents.</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Connect(System.String)">
      <summary>
            Connects to the specified Solr server URL.
            </summary>
      <param name="serverURL">The server URL.</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Connect(System.String,System.Int32)">
      <summary>
            Connects to the specified Solr server URL.
            </summary>
      <param name="serverURL">The server URL.</param>
      <param name="timeout">The HTTP connection timeout.</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String,System.Int32,System.Int32)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <param name="start">Pagination item start</param>
      <param name="rows">Pagination item count</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String,SolrNet.SortOrder)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <param name="order">Sort order</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <param name="order">Sort orders</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String,SolrNet.SortOrder,System.Int32,System.Int32)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <param name="order">Sort order</param>
      <param name="start">Pagination item start</param>
      <param name="rows">Pagination item count</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder},System.Int32,System.Int32)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="s">Query</param>
      <param name="order">Sort orders</param>
      <param name="start">Pagination item start</param>
      <param name="rows">Pagination item count</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(SolrNet.ISolrQuery)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="q">Query</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(SolrNet.ISolrQuery,System.Int32,System.Int32)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="q">Query</param>
      <param name="start">Pagination item start</param>
      <param name="rows">Pagination item count</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(SolrNet.SolrQuery,SolrNet.SortOrder)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="query">Query</param>
      <param name="order">Sort order</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(SolrNet.SolrQuery,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="query">Query</param>
      <param name="orders">Sort orders</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Query``1(SolrNet.SolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
      <summary>
            Executes a query
            </summary>
      <typeparam name="T">Document type</typeparam>
      <param name="query">Query</param>
      <param name="options">The QueryOptions to use.</param>
      <returns>Query results</returns>
    </member>
    <member name="M:SolrNet.DSL.Solr.Commit">
      <summary>
            Commits posted documents
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Solr.Commit(System.Boolean,System.Boolean)">
      <summary>
            Commits posted documents
            </summary>
      <param name="waitFlush">wait for flush</param>
      <param name="waitSearcher">wait for new searcher</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Commit(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Commits posted documents
            </summary>
      <param name="waitFlush">wait for flush</param>
      <param name="waitSearcher">wait for new searcher</param>
      <param name="expungeDeletes">Merge segments with deletes away</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Commit(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            Commits posted documents
            </summary>
      <param name="waitFlush">wait for flush</param>
      <param name="waitSearcher">wait for new searcher</param>
      <param name="expungeDeletes">Merge segments with deletes away</param>
      <param name="maxSegments">Optimizes down to, at most, this number of segments</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Optimize">
      <summary>
            Optimizes Solr's index
            </summary>
    </member>
    <member name="M:SolrNet.DSL.Solr.Optimize(System.Boolean,System.Boolean)">
      <summary>
            Optimizes Solr's index
            </summary>
      <param name="waitFlush">Wait for flush</param>
      <param name="waitSearcher">Wait for new searcher</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Optimize(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Optimizes Solr's index
            </summary>
      <param name="waitFlush">Wait for flush</param>
      <param name="waitSearcher">Wait for new searcher</param>
      <param name="expungeDeletes">Merge segments with deletes away</param>
    </member>
    <member name="M:SolrNet.DSL.Solr.Optimize(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            Optimizes Solr's index
            </summary>
      <param name="waitFlush">Wait for flush</param>
      <param name="waitSearcher">Wait for new searcher</param>
      <param name="expungeDeletes">Merge segments with deletes away</param>
      <param name="maxSegments">Optimizes down to, at most, this number of segments</param>
    </member>
    <member name="P:SolrNet.DSL.Solr.Connection">
      <summary>
            thread-local or webcontext-local connection
            </summary>
      <seealso href="http://www.ayende.com/Blog/archive/7447.aspx" />
      <seealso href="http://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/trunk/rhino-commons/Rhino.Commons/LocalDataImpl/" />
    </member>
    <member name="T:HttpWebAdapters.BasicAuthHttpWebRequestFactory">
      <summary>
            Creates a web request that does basic auth
            </summary>
    </member>
    <member name="M:HttpWebAdapters.BasicAuthHttpWebRequestFactory.#ctor(System.String,System.String)">
      <summary>
            Creates a web request that does basic auth
            </summary>
      <param name="username">HTTP username</param>
      <param name="password">HTTP password</param>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.GetRequestStream">
      <summary>
             Gets a <see cref="T:System.IO.Stream"></see> object to use to write request data.
             </summary>
      <returns>
             A <see cref="T:System.IO.Stream"></see> to use to write request data.
             </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:HttpWebAdapters.IHttpWebRequest.GetRequestStream"></see> method is called more than once.-or- <see cref="P:HttpWebAdapters.IHttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:HttpWebAdapters.IHttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.ObjectDisposedException">In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see Network Programming in the .NET Compact Framework.</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:HttpWebAdapters.IHttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:HttpWebAdapters.IHttpWebRequest.Method"></see> property is GET or HEAD.-or- <see cref="P:HttpWebAdapters.IHttpWebRequest.KeepAlive"></see> is true, <see cref="P:HttpWebAdapters.IHttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:HttpWebAdapters.IHttpWebRequest.ContentLength"></see> is -1, <see cref="P:HttpWebAdapters.IHttpWebRequest.SendChunked"></see> is false, and <see cref="P:HttpWebAdapters.IHttpWebRequest.Method"></see> is POST or PUT. </exception>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.Abort">
      <summary>
            Cancels a request to an Internet resource.
            </summary>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.Int32,System.Int32)">
      <summary>
             Adds a byte range header to the request for a specified range.
             </summary>
      <param name="to">The position at which to stop sending data. </param>
      <param name="from">The position at which to start sending data. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.Int32)">
      <summary>
             Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
             </summary>
      <param name="range">The starting or ending point of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <summary>
             Adds a range header to a request for a specified range.
             </summary>
      <param name="from">The position at which to start sending data. </param>
      <param name="to">The position at which to stop sending data. </param>
      <param name="rangeSpecifier">The description of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebRequest.AddRange(System.String,System.Int32)">
      <summary>
             Adds a range header to a request for a specific range from the beginning or end of the requested data.
             </summary>
      <param name="range">The starting or ending point of the range. </param>
      <param name="rangeSpecifier">The description of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.AllowAutoRedirect">
      <summary>
             Gets or sets a value that indicates whether the request should follow redirection responses.
             </summary>
      <returns>
             true if the request should automatically follow redirection responses from the Internet resource; otherwise, false. The default value is true.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.AllowWriteStreamBuffering">
      <summary>
             Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.
             </summary>
      <returns>
             true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.HaveResponse">
      <summary>
             Gets a value that indicates whether a response has been received from an Internet resource.
             </summary>
      <returns>
             true if a response has been received; otherwise, false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.KeepAlive">
      <summary>
             Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.
             </summary>
      <returns>
            true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Pipelined">
      <summary>
            Gets or sets a value that indicates whether to pipeline the request to the Internet resource.
             </summary>
      <returns>
            true if the request should be pipelined; otherwise, false. The default is true.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.PreAuthenticate">
      <summary>
            Gets or sets a value that indicates whether to send an authenticate header with the request.
             </summary>
      <returns>
            true to send a WWW-authenticate HTTP header with requests after authentication has taken place; otherwise, false. The default is false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.UnsafeAuthenticatedConnectionSharing">
      <summary>
            Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.
             </summary>
      <returns>
            true to keep the authenticated connection open; otherwise, false.
             </returns>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.SendChunked">
      <summary>
            Gets or sets a value that indicates whether to send data in segments to the Internet resource.
             </summary>
      <returns>
            true to send data to the Internet resource in segments; otherwise, false. The default value is false.
             </returns>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.AutomaticDecompression">
      <summary>
            Gets or sets the type of decompression that is used.
             </summary>
      <returns>
            A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used. 
             </returns>
      <exception cref="T:System.InvalidOperationException">The object's current state does not allow this property to be set.</exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.MaximumResponseHeadersLength">
      <summary>
            Gets or sets the maximum allowed length of the response headers.
             </summary>
      <returns>
            The length, in kilobytes (1024 bytes), of the response headers.
             </returns>
      <exception cref="T:System.InvalidOperationException">The property is set after the request has already been submitted. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0 and is not equal to -1. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ClientCertificates">
      <summary>
            Gets or sets the collection of security certificates that are associated with this request.
             </summary>
      <returns>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains the security certificates associated with this request.
             </returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.CookieContainer">
      <summary>
            Gets or sets the cookies associated with the request.
             </summary>
      <returns>
            A <see cref="T:System.Net.CookieContainer"></see> that contains the cookies associated with this request.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.RequestUri">
      <summary>
            Gets the original Uniform Resource Identifier (URI) of the request.
             </summary>
      <returns>
            A <see cref="T:System.Uri"></see> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ContentLength">
      <summary>
            Gets or sets the Content-length HTTP header.
             </summary>
      <returns>
            The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.
             </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The new <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> value is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Timeout">
      <summary>
            Gets or sets the time-out value for the <see cref="M:System.Net.HttpWebRequest.GetResponse"></see> and <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> methods.
             </summary>
      <returns>
            The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds).
             </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ReadWriteTimeout">
      <summary>
            Gets or sets a time-out when writing to or reading from a stream.
             </summary>
      <returns>
            The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).
             </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see></exception>
      <exception cref="T:System.InvalidOperationException">The request has already been sent. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Address">
      <summary>
            Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.
             </summary>
      <returns>
            A <see cref="T:System.Uri"></see> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method to initialize the request.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ServicePoint">
      <summary>
            Gets the service point to use for the request.
             </summary>
      <returns>
            A <see cref="T:System.Net.ServicePoint"></see> that represents the network connection to the Internet resource.
             </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.MaximumAutomaticRedirections">
      <summary>
            Gets or sets the maximum number of redirects that the request follows.
             </summary>
      <returns>
            The maximum number of redirection responses that the request follows. The default value is 50.
             </returns>
      <exception cref="T:System.ArgumentException">The value is set to 0 or less. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Credentials">
      <summary>
            Gets or sets authentication information for the request.
             </summary>
      <returns>
            An <see cref="T:System.Net.ICredentials"></see> that contains the authentication credentials associated with the request. The default is null.
             </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.UseDefaultCredentials">
      <summary>
            Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether default credentials are sent with requests.
             </summary>
      <returns>
            true if the default credentials are used; otherwise false. The default value is false.
             </returns>
      <exception cref="T:System.InvalidOperationException">You attempted to set this property after the request was sent.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ConnectionGroupName">
      <summary>
            Gets or sets the name of the connection group for the request.
             </summary>
      <returns>
            The name of the connection group for this request. The default value is null.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Headers">
      <summary>
            Specifies a collection of the name/value pairs that make up the HTTP headers.
             </summary>
      <returns>
            A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the name/value pairs that make up the headers for the HTTP request.
             </returns>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Proxy">
      <summary>
            Gets or sets proxy information for the request.
             </summary>
      <returns>
            The <see cref="T:System.Net.IWebProxy"></see> object to use to proxy the request. The default value is set by calling the <see cref="P:System.Net.GlobalProxySelection.Select"></see> property.
             </returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission for the requested operation. </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpWebRequest.Proxy">
        </see> is set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ProtocolVersion">
      <summary>
            Gets or sets the version of HTTP to use for the request.
             </summary>
      <returns>
            The HTTP version to use for the request. The default is <see cref="F:System.Net.HttpVersion.Version11"></see>.
             </returns>
      <exception cref="T:System.ArgumentException">The HTTP version is set to a value other than 1.0 or 1.1. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.ContentType">
      <summary>
            Gets or sets the value of the Content-type HTTP header.
             </summary>
      <returns>
            The value of the Content-type HTTP header. The default value is null.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.MediaType">
      <summary>
            Gets or sets the media type of the request.
             </summary>
      <returns>
            The media type of the request. The default value is null.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.TransferEncoding">
      <summary>
            Gets or sets the value of the Transfer-encoding HTTP header.
             </summary>
      <returns>
            The value of the Transfer-encoding HTTP header. The default value is null.
             </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding">
        </see> is set when <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding">
        </see> is set to the value "Chunked". </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Connection">
      <summary>
            Gets or sets the value of the Connection HTTP header.
             </summary>
      <returns>
            The value of the Connection HTTP header. The default value is null.
             </returns>
      <exception cref="T:System.ArgumentException">The value of <see cref="P:System.Net.HttpWebRequest.Connection"></see> is set to Keep-alive or Close. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Accept">
      <summary>
            Gets or sets the value of the Accept HTTP header.
             </summary>
      <returns>
            The value of the Accept HTTP header. The default value is null.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Referer">
      <summary>
            Gets or sets the value of the Referer HTTP header.
             </summary>
      <returns>
            The value of the Referer HTTP header. The default value is null.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.UserAgent">
      <summary>
            Gets or sets the value of the User-agent HTTP header.
             </summary>
      <returns>
            The value of the User-agent HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.Expect">
      <summary>
            Gets or sets the value of the Expect HTTP header.
             </summary>
      <returns>
            The contents of the Expect HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
             </returns>
      <exception cref="T:System.ArgumentException">Expect is set to a string that contains "100-continue" as a substring. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebRequest.IfModifiedSince">
      <summary>
            Gets or sets the value of the If-Modified-Since HTTP header.
             </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time.
             </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.GetRequestStream">
      <summary>
            Gets a <see cref="T:System.IO.Stream"></see> object to use to write request data.
            </summary>
      <returns>
            A <see cref="T:System.IO.Stream"></see> to use to write request data.
            </returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> method is called more than once.-or- <see cref="P:System.Net.HttpWebRequest.TransferEncoding"></see> is set to a value and <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.ObjectDisposedException">In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see Network Programming in the .NET Compact Framework.</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort">
        </see> was previously called.-or- The time-out period for the request expired.-or- An error occurred while processing the request. </exception>
      <exception cref="T:System.NotSupportedException">The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </exception>
      <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:System.Net.HttpWebRequest.Method"></see> property is GET or HEAD.-or- <see cref="P:System.Net.HttpWebRequest.KeepAlive"></see> is true, <see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering"></see> is false, <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> is -1, <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false, and <see cref="P:System.Net.HttpWebRequest.Method"></see> is POST or PUT. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.DnsPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Abort">
      <summary>
            Cancels a request to an Internet resource.
            </summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.Int32,System.Int32)">
      <summary>
            Adds a byte range header to the request for a specified range.
            </summary>
      <param name="to">The position at which to stop sending data. </param>
      <param name="from">The position at which to start sending data. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.Int32)">
      <summary>
            Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
            </summary>
      <param name="range">The starting or ending point of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.String,System.Int32,System.Int32)">
      <summary>
            Adds a range header to a request for a specified range.
            </summary>
      <param name="from">The position at which to start sending data. </param>
      <param name="to">The position at which to stop sending data. </param>
      <param name="rangeSpecifier">The description of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">from is greater than to-or- from or to is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AddRange(System.String,System.Int32)">
      <summary>
            Adds a range header to a request for a specific range from the beginning or end of the requested data.
            </summary>
      <param name="range">The starting or ending point of the range. </param>
      <param name="rangeSpecifier">The description of the range. </param>
      <exception cref="T:System.ArgumentException">rangeSpecifier is invalid. </exception>
      <exception cref="T:System.ArgumentNullException">rangeSpecifier is null. </exception>
      <exception cref="T:System.InvalidOperationException">The range header could not be added. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AllowAutoRedirect">
      <summary>
            Gets or sets a value that indicates whether the request should follow redirection responses.
            </summary>
      <returns>
            true if the request should automatically follow redirection responses from the Internet resource; otherwise, false. The default value is true.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AllowWriteStreamBuffering">
      <summary>
            Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.
            </summary>
      <returns>
            true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.HaveResponse">
      <summary>
            Gets a value that indicates whether a response has been received from an Internet resource.
            </summary>
      <returns>
            true if a response has been received; otherwise, false.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.KeepAlive">
      <summary>
            Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.
            </summary>
      <returns>
            true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Pipelined">
      <summary>
            Gets or sets a value that indicates whether to pipeline the request to the Internet resource.
            </summary>
      <returns>
            true if the request should be pipelined; otherwise, false. The default is true.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.PreAuthenticate">
      <summary>
            Gets or sets a value that indicates whether to send an authenticate header with the request.
            </summary>
      <returns>
            true to send a WWW-authenticate HTTP header with requests after authentication has taken place; otherwise, false. The default is false.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UnsafeAuthenticatedConnectionSharing">
      <summary>
            Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.
            </summary>
      <returns>
            true to keep the authenticated connection open; otherwise, false.
            </returns>
      <PermissionSet>
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.SendChunked">
      <summary>
            Gets or sets a value that indicates whether to send data in segments to the Internet resource.
            </summary>
      <returns>
            true to send data to the Internet resource in segments; otherwise, false. The default value is false.
            </returns>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.AutomaticDecompression">
      <summary>
            Gets or sets the type of decompression that is used.
            </summary>
      <returns>
            A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used. 
            </returns>
      <exception cref="T:System.InvalidOperationException">The object's current state does not allow this property to be set.</exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MaximumResponseHeadersLength">
      <summary>
            Gets or sets the maximum allowed length of the response headers.
            </summary>
      <returns>
            The length, in kilobytes (1024 bytes), of the response headers.
            </returns>
      <exception cref="T:System.InvalidOperationException">The property is set after the request has already been submitted. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than 0 and is not equal to -1. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ClientCertificates">
      <summary>
            Gets or sets the collection of security certificates that are associated with this request.
            </summary>
      <returns>
            The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"></see> that contains the security certificates associated with this request.
            </returns>
      <exception cref="T:System.ArgumentNullException">The value specified for a set operation is null. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.CookieContainer">
      <summary>
            Gets or sets the cookies associated with the request.
            </summary>
      <returns>
            A <see cref="T:System.Net.CookieContainer"></see> that contains the cookies associated with this request.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.RequestUri">
      <summary>
            Gets the original Uniform Resource Identifier (URI) of the request.
            </summary>
      <returns>
            A <see cref="T:System.Uri"></see> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ContentLength">
      <summary>
            Gets or sets the Content-length HTTP header.
            </summary>
      <returns>
            The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The new <see cref="P:System.Net.HttpWebRequest.ContentLength"></see> value is less than 0. </exception>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Timeout">
      <summary>
            Gets or sets the time-out value for the <see cref="M:System.Net.HttpWebRequest.GetResponse"></see> and <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see> methods.
            </summary>
      <returns>
            The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than zero and is not <see cref="F:System.Threading.Timeout.Infinite"></see>.</exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ReadWriteTimeout">
      <summary>
            Gets or sets a time-out when writing to or reading from a stream.
            </summary>
      <returns>
            The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for a set operation is less than or equal to zero and is not equal to <see cref="F:System.Threading.Timeout.Infinite"></see></exception>
      <exception cref="T:System.InvalidOperationException">The request has already been sent. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Address">
      <summary>
            Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.
            </summary>
      <returns>
            A <see cref="T:System.Uri"></see> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <see cref="M:System.Net.WebRequest.Create(System.String)"></see> method to initialize the request.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ServicePoint">
      <summary>
            Gets the service point to use for the request.
            </summary>
      <returns>
            A <see cref="T:System.Net.ServicePoint"></see> that represents the network connection to the Internet resource.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MaximumAutomaticRedirections">
      <summary>
            Gets or sets the maximum number of redirects that the request follows.
            </summary>
      <returns>
            The maximum number of redirection responses that the request follows. The default value is 50.
            </returns>
      <exception cref="T:System.ArgumentException">The value is set to 0 or less. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Credentials">
      <summary>
            Gets or sets authentication information for the request.
            </summary>
      <returns>
            An <see cref="T:System.Net.ICredentials"></see> that contains the authentication credentials associated with the request. The default is null.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UseDefaultCredentials">
      <summary>
            Gets or sets a <see cref="T:System.Boolean"></see> value that controls whether default credentials are sent with requests.
            </summary>
      <returns>
            true if the default credentials are used; otherwise false. The default value is false.
            </returns>
      <exception cref="T:System.InvalidOperationException">You attempted to set this property after the request was sent.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="USERNAME" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ConnectionGroupName">
      <summary>
            Gets or sets the name of the connection group for the request.
            </summary>
      <returns>
            The name of the connection group for this request. The default value is null.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Headers">
      <summary>
            Specifies a collection of the name/value pairs that make up the HTTP headers.
            </summary>
      <returns>
            A <see cref="T:System.Net.WebHeaderCollection"></see> that contains the name/value pairs that make up the headers for the HTTP request.
            </returns>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see> method. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Proxy">
      <summary>
            Gets or sets proxy information for the request.
            </summary>
      <returns>
            The <see cref="T:System.Net.IWebProxy"></see> object to use to proxy the request. The default value is set by calling the <see cref="P:System.Net.GlobalProxySelection.Select"></see> property.
            </returns>
      <exception cref="T:System.Security.SecurityException">The caller does not have permission for the requested operation. </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpWebRequest.Proxy">
        </see> is set to null. </exception>
      <exception cref="T:System.InvalidOperationException">The request has been started by calling <see cref="M:System.Net.HttpWebRequest.GetRequestStream"></see>, <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"></see>, <see cref="M:System.Net.HttpWebRequest.GetResponse"></see>, or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"></see>. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Net.WebPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ProtocolVersion">
      <summary>
            Gets or sets the version of HTTP to use for the request.
            </summary>
      <returns>
            The HTTP version to use for the request. The default is <see cref="F:System.Net.HttpVersion.Version11"></see>.
            </returns>
      <exception cref="T:System.ArgumentException">The HTTP version is set to a value other than 1.0 or 1.1. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.ContentType">
      <summary>
            Gets or sets the value of the Content-type HTTP header.
            </summary>
      <returns>
            The value of the Content-type HTTP header. The default value is null.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.MediaType">
      <summary>
            Gets or sets the media type of the request.
            </summary>
      <returns>
            The media type of the request. The default value is null.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.TransferEncoding">
      <summary>
            Gets or sets the value of the Transfer-encoding HTTP header.
            </summary>
      <returns>
            The value of the Transfer-encoding HTTP header. The default value is null.
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding">
        </see> is set when <see cref="P:System.Net.HttpWebRequest.SendChunked"></see> is false. </exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding">
        </see> is set to the value "Chunked". </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Connection">
      <summary>
            Gets or sets the value of the Connection HTTP header.
            </summary>
      <returns>
            The value of the Connection HTTP header. The default value is null.
            </returns>
      <exception cref="T:System.ArgumentException">The value of <see cref="P:System.Net.HttpWebRequest.Connection"></see> is set to Keep-alive or Close. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Accept">
      <summary>
            Gets or sets the value of the Accept HTTP header.
            </summary>
      <returns>
            The value of the Accept HTTP header. The default value is null.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Referer">
      <summary>
            Gets or sets the value of the Referer HTTP header.
            </summary>
      <returns>
            The value of the Referer HTTP header. The default value is null.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.UserAgent">
      <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
      <returns>
            The value of the User-agent HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
            </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.Expect">
      <summary>
            Gets or sets the value of the Expect HTTP header.
            </summary>
      <returns>
            The contents of the Expect HTTP header. The default value is null.The value for this property is stored in <see cref="T:System.Net.WebHeaderCollection"></see>. If WebHeaderCollection is set, the property value is lost.
            </returns>
      <exception cref="T:System.ArgumentException">Expect is set to a string that contains "100-continue" as a substring. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebRequestAdapter.IfModifiedSince">
      <summary>
            Gets or sets the value of the If-Modified-Since HTTP header.
            </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time.
            </returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebResponse.GetResponseHeader(System.String)">
      <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
      <returns>
            The contents of the specified header.
             </returns>
      <param name="headerName">The header value to return. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebResponse.Close">
      <summary>
            When overridden by a descendant class, closes the response stream.
             </summary>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.IHttpWebResponse.GetResponseStream">
      <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
             </summary>
      <returns>
            An instance of the <see cref="T:System.IO.Stream"></see> class for reading data from the Internet resource.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.Cookies">
      <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
      <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.ContentEncoding">
      <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
      <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.CharacterSet">
      <summary>
            Gets the character set of the response.
             </summary>
      <returns>
            A string that contains the character set of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.Server">
      <summary>
            Gets the name of the server that sent the response.
             </summary>
      <returns>
            A string that contains the name of the server that sent the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.LastModified">
      <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.StatusCode">
      <summary>
            Gets the status of the response.
             </summary>
      <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.StatusDescription">
      <summary>
            Gets the status description returned with the response.
             </summary>
      <returns>
            A string that describes the status of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.ProtocolVersion">
      <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
      <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.Method">
      <summary>
            Gets the method that is used to return the response.
             </summary>
      <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.IsFromCache">
      <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether this response was obtained from the cache.
             </summary>
      <returns>
            true if the response was taken from the cache; otherwise, false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.IsMutuallyAuthenticated">
      <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.
             </summary>
      <returns>
            true if both client and server were authenticated; otherwise, false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.ContentLength">
      <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
             </summary>
      <returns>
            The number of bytes returned from the Internet resource.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.ContentType">
      <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
             </summary>
      <returns>
            A string that contains the content type of the response.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.ResponseUri">
      <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
             </summary>
      <returns>
            An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet resource that actually responded to the request.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.IHttpWebResponse.Headers">
      <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
             </summary>
      <returns>
            An instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class that contains header values associated with this response.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.GetResponseHeader(System.String)">
      <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
      <returns>
            The contents of the specified header.
             </returns>
      <param name="headerName">The header value to return. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Close">
      <summary>
            When overridden by a descendant class, closes the response stream.
             </summary>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.GetResponseStream">
      <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
             </summary>
      <returns>
            An instance of the <see cref="T:System.IO.Stream"></see> class for reading data from the Internet resource.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Cookies">
      <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
      <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentEncoding">
      <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
      <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.CharacterSet">
      <summary>
            Gets the character set of the response.
             </summary>
      <returns>
            A string that contains the character set of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Server">
      <summary>
            Gets the name of the server that sent the response.
             </summary>
      <returns>
            A string that contains the name of the server that sent the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.LastModified">
      <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.StatusCode">
      <summary>
            Gets the status of the response.
             </summary>
      <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.StatusDescription">
      <summary>
            Gets the status description returned with the response.
             </summary>
      <returns>
            A string that describes the status of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ProtocolVersion">
      <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
      <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Method">
      <summary>
            Gets the method that is used to return the response.
             </summary>
      <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.IsFromCache">
      <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether this response was obtained from the cache.
             </summary>
      <returns>
            true if the response was taken from the cache; otherwise, false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.IsMutuallyAuthenticated">
      <summary>
            Gets a <see cref="T:System.Boolean"></see> value that indicates whether mutual authentication occurred.
             </summary>
      <returns>
            true if both client and server were authenticated; otherwise, false.
             </returns>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentLength">
      <summary>
            When overridden in a descendant class, gets or sets the content length of data being received.
             </summary>
      <returns>
            The number of bytes returned from the Internet resource.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ContentType">
      <summary>
            When overridden in a derived class, gets or sets the content type of the data being received.
             </summary>
      <returns>
            A string that contains the content type of the response.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.ResponseUri">
      <summary>
            When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
             </summary>
      <returns>
            An instance of the <see cref="T:System.Uri"></see> class that contains the URI of the Internet resource that actually responded to the request.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.Adapters.HttpWebResponseAdapter.Headers">
      <summary>
            When overridden in a derived class, gets a collection of header name-value pairs associated with this request.
             </summary>
      <returns>
            An instance of the <see cref="T:System.Net.WebHeaderCollection"></see> class that contains header values associated with this response.
             </returns>
      <exception cref="T:System.NotSupportedException">Any attempt is made to get or set the property, when the property is not overridden in a descendant class. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:HttpWebAdapters.WebResponseStub.GetResponseHeader(System.String)">
      <summary>
            Gets the contents of a header that was returned with the response.
             </summary>
      <returns>
            The contents of the specified header.
             </returns>
      <param name="headerName">The header value to return. </param>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.Cookies">
      <summary>
            Gets or sets the cookies that are associated with this response.
             </summary>
      <returns>
            A <see cref="T:System.Net.CookieCollection"></see> that contains the cookies that are associated with this response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.ContentEncoding">
      <summary>
            Gets the method that is used to encode the body of the response.
             </summary>
      <returns>
            A string that describes the method that is used to encode the body of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.CharacterSet">
      <summary>
            Gets the character set of the response.
             </summary>
      <returns>
            A string that contains the character set of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.Server">
      <summary>
            Gets the name of the server that sent the response.
             </summary>
      <returns>
            A string that contains the name of the server that sent the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.LastModified">
      <summary>
            Gets the last date and time that the contents of the response were modified.
             </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> that contains the date and time that the contents of the response were modified.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.StatusCode">
      <summary>
            Gets the status of the response.
             </summary>
      <returns>
            One of the <see cref="T:System.Net.HttpStatusCode"></see> values.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.StatusDescription">
      <summary>
            Gets the status description returned with the response.
             </summary>
      <returns>
            A string that describes the status of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.ProtocolVersion">
      <summary>
            Gets the version of the HTTP protocol that is used in the response.
             </summary>
      <returns>
            A <see cref="T:System.Version"></see> that contains the HTTP protocol version of the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="P:HttpWebAdapters.WebResponseStub.Method">
      <summary>
            Gets the method that is used to return the response.
             </summary>
      <returns>
            A string that contains the HTTP method that is used to return the response.
             </returns>
      <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
    </member>
    <member name="T:Castle.Facilities.SolrNetIntegration.SolrCore">
      <summary>
            Represents a Solr core for configuration
            </summary>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrCore.#ctor(System.String,System.Type,System.String)">
      <summary>
            Creates a new Solr core for configuration
            </summary>
      <param name="id">Component name for <see cref="T:SolrNet.ISolrOperations`1" /></param>
      <param name="documentType">Document type</param>
      <param name="url">Core url</param>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrCore.#ctor(System.Type,System.String)">
      <summary>
            Creates a new Solr core for configuration
            </summary>
      <param name="documentType">Document type</param>
      <param name="url">Core url</param>
    </member>
    <member name="T:Castle.Facilities.SolrNetIntegration.SolrNetFacility">
      <summary>
            Configures SolrNet in a Windsor container
            </summary>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.#ctor">
      <summary>
            Configures SolrNet in a Windsor container
            </summary>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.#ctor(System.String)">
      <summary>
            Configures SolrNet in a Windsor container
            </summary>
      <param name="solrURL">
      </param>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.RegisterCore(Castle.Facilities.SolrNetIntegration.SolrCore)">
      <summary>
            Registers a new core in the container.
            This method is meant to be used after the facility initialization
            </summary>
      <param name="core">
      </param>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.AddCore(System.Type,System.String)">
      <summary>
            Adds a new core configuration to the facility
            </summary>
      <param name="documentType">
      </param>
      <param name="coreUrl">
      </param>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.AddCore(System.String,System.Type,System.String)">
      <summary>
            Adds a new core configuration to the facility
            </summary>
      <param name="coreId">Component name for <see cref="T:SolrNet.ISolrOperations`1" /></param>
      <param name="documentType">
      </param>
      <param name="coreUrl">
      </param>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.BuildCoreAdmin(System.String)">
      <summary>
            Builds an instance of core admin manager with the specified URL
            </summary>
      <param name="url">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.SolrNetFacility.BuildCoreAdmin(SolrNet.ISolrConnection)">
      <summary>
            Builds an instance of core admin manager with the specified connection
            </summary>
      <param name="conn">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Castle.Facilities.SolrNetIntegration.SolrNetFacility.Mapper">
      <summary>
            Default mapper override
            </summary>
    </member>
    <member name="T:Castle.Facilities.SolrNetIntegration.StrictArrayResolver">
      <summary>
            Resolves all components with a particular service interface, without subtyping
            </summary>
    </member>
    <member name="M:Castle.Facilities.SolrNetIntegration.StrictArrayResolver.#ctor(Castle.MicroKernel.IKernel)">
      <summary>
            Resolves all components with a particular service interface, without subtyping
            </summary>
      <param name="kernel">
      </param>
    </member>
    <member name="T:Ninject.Integration.SolrNet.Config.SolrConfigurationSection">
      <summary>
            Configuration section for Solr servers
            </summary>
    </member>
    <member name="P:Ninject.Integration.SolrNet.Config.SolrConfigurationSection.SolrServers">
      <summary>
            Solr Servers configuration settings
            </summary>
    </member>
    <member name="T:Ninject.Integration.SolrNet.SolrNetModule">
      <summary>
            Configures SolrNet in a Ninject kernel
            </summary>
    </member>
    <member name="M:Ninject.Integration.SolrNet.SolrNetModule.#ctor(System.String)">
      <summary>
            Configures SolrNet in a Ninject kernel
            </summary>
      <param name="serverURL">
      </param>
    </member>
    <member name="M:Ninject.Integration.SolrNet.SolrNetModule.#ctor(Ninject.Integration.SolrNet.Config.SolrServers)">
      <summary>
            Configures SolrNet in a Ninject kernel with multiple servers/cores
            </summary>
      <param name="solrServers">
      </param>
    </member>
    <member name="P:Ninject.Integration.SolrNet.SolrNetModule.Mapper">
      <summary>
            Optional override for document mapper
            </summary>
    </member>
    <member name="M:StructureMap.SolrNetIntegration.SolrNetRegistry.RegisterCore(StructureMap.SolrNetIntegration.SolrCore)">
      <summary>
            Registers a new core in the container.
            This method is meant to be used after the facility initialization
            </summary>
      <param name="core">
      </param>
    </member>
    <member name="T:AutofacContrib.SolrNet.Config.SolrServerElement">
      <summary>
            Solr instance or core config
            </summary>
    </member>
    <member name="P:AutofacContrib.SolrNet.Config.SolrServerElement.Id">
      <summary>
            Core / instance ID
            </summary>
    </member>
    <member name="P:AutofacContrib.SolrNet.Config.SolrServerElement.Url">
      <summary>
            Core / instance URL
            </summary>
    </member>
    <member name="P:AutofacContrib.SolrNet.Config.SolrServerElement.DocumentType">
      <summary>
            Core / instance document type
            </summary>
    </member>
    <member name="T:AutofacContrib.SolrNet.Config.SolrServers">
      <summary>
            Solr cores / instances configuration
            </summary>
    </member>
    <member name="M:AutofacContrib.SolrNet.Config.SolrServers.Add(AutofacContrib.SolrNet.Config.SolrServerElement)">
      <summary>
            Adds a new core / instance to the config
            </summary>
      <param name="configurationElement">
      </param>
    </member>
    <member name="T:AutofacContrib.SolrNet.SolrNetModule">
      <summary>
            Configures SolrNet in an Autofac container
            </summary>
    </member>
    <member name="M:AutofacContrib.SolrNet.SolrNetModule.#ctor(System.String)">
      <summary>
              Register a single-core server
            </summary>
      <param name="serverUrl">
      </param>
    </member>
    <member name="M:AutofacContrib.SolrNet.SolrNetModule.#ctor(AutofacContrib.SolrNet.Config.SolrServers)">
      <summary>
              Register multi-core server
            </summary>
      <param name="solrServers">
      </param>
    </member>
    <member name="M:AutofacContrib.SolrNet.SolrNetModule.RegisterCore(AutofacContrib.SolrNet.SolrCore,Autofac.ContainerBuilder)">
      <summary>
              Registers a new core in the container.
              This method is meant to be used after the facility initialization
            </summary>
    </member>
    <member name="P:AutofacContrib.SolrNet.SolrNetModule.Mapper">
      <summary>
            Optional override for document mapper
            </summary>
    </member>
    <member name="P:AutofacContrib.SolrNet.SolrNetModule.HttpWebRequestFactory">
      <summary>
            Optional override to provide a different <see cref="T:HttpWebAdapters.IHttpWebRequestFactory" />.
            </summary>
    </member>
    <member name="T:NHibernate.SolrNet.CfgHelper">
      <summary>
            Helper class to configure NHibernate-SolrNet integration.
            </summary>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.#ctor(SolrNet.IReadOnlyMappingManager,System.IServiceProvider)">
      <summary>
            Gets SolrNet components from a <see cref="T:System.IServiceProvider" />, except for the <see cref="T:SolrNet.IReadOnlyMappingManager" /></summary>
      <param name="mapper">Use this mapper for NHibernate-SolrNet integration</param>
      <param name="provider">Used to fetch SolrNet components</param>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.#ctor(System.IServiceProvider)">
      <summary>
            Gets SolrNet components from a <see cref="T:System.IServiceProvider" /></summary>
      <param name="provider">Used to fetch SolrNet components</param>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.#ctor">
      <summary>
            Gets SolrNet components from the current <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator" /></summary>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.Configure(NHibernate.Cfg.Configuration,System.Boolean)">
      <summary>
            Registers SolrNet's NHibernate listeners
            </summary>
      <param name="config">NHibernate configuration</param>
      <param name="autoCommit">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.Configure(NHibernate.Cfg.Configuration,System.Boolean,SolrNet.AddParameters)">
      <summary>
            Registers SolrNet's NHibernate listeners
            </summary>
      <param name="config">NHibernate configuration</param>
      <param name="autoCommit">if set to <c>true</c> [auto commit].</param>
      <param name="parameters">The add parameters to use when adding a document to the index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.OpenSession(NHibernate.ISession)">
      <summary>
            Wraps a NHibernate <see cref="T:NHibernate.ISession" /> and adds Solr operations
            </summary>
      <param name="session">
        <see cref="T:NHibernate.ISession" /> to wrap</param>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.CfgHelper.OpenSession(NHibernate.ISessionFactory)">
      <summary>
            Opens a new NHibernate <see cref="T:NHibernate.ISession" /> and wraps it to add Solr operations
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NHibernate.SolrNet.Impl.IListenerSettings.Commit">
      <summary>
            Automatically commit Solr after each update
            </summary>
    </member>
    <member name="P:NHibernate.SolrNet.Impl.IListenerSettings.AddParameters">
      <summary>
            Gets or sets the parameters to use when adding a document to the index.
            </summary>
      <value>The parameters to use when adding a document to the index.</value>
    </member>
    <member name="T:NHibernate.SolrNet.INHSolrQuery">
      <summary>
            NHibernate <see cref="T:NHibernate.IQuery" /> for SolrNet queries
            </summary>
    </member>
    <member name="M:NHibernate.SolrNet.INHSolrQuery.SetMaxResults(System.Int32)">
      <summary>
            Set the maximum number of rows to retrieve.
            </summary>
      <param name="maxResults">The maximum number of rows to retreive</param>
      <returns>this</returns>
    </member>
    <member name="M:NHibernate.SolrNet.INHSolrQuery.SetFirstResult(System.Int32)">
      <summary>
            Sets the first row to retrieve.
            </summary>
      <param name="firstResult">The first row to retreive.</param>
      <returns>this</returns>
    </member>
    <member name="M:NHibernate.SolrNet.INHSolrQuery.SetSort(NHibernate.Criterion.Order)">
      <summary>
            Sets sort order
            </summary>
      <param name="o">Sort order</param>
      <returns>this</returns>
    </member>
    <member name="T:NHibernate.SolrNet.ISolrSession">
      <summary>
            NHibernate <see cref="T:NHibernate.ISession" /> with SolrNet extensions for querying
            </summary>
    </member>
    <member name="M:NHibernate.SolrNet.ISolrSession.CreateSolrQuery(System.String)">
      <summary>
            Creates a Solr query
            </summary>
      <param name="query">Solr query</param>
      <returns>query object</returns>
    </member>
    <member name="M:NHibernate.SolrNet.ISolrSession.CreateSolrQuery(SolrNet.ISolrQuery)">
      <summary>
            Creates a Solr query
            </summary>
      <param name="query">Solr query</param>
      <returns>query object</returns>
    </member>
    <member name="T:NHibernate.SolrNet.Impl.NHSolrQueryImpl">
      <summary>
            NHibernate <see cref="T:NHibernate.IQuery" /> for SolrNet queries
            </summary>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.SetLockMode(System.String,NHibernate.LockMode)">
      <summary>
            Ignored
            </summary>
      <param name="alias">
      </param>
      <param name="lockMode">
      </param>
      <returns>this</returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.ExecuteUpdate">
      <summary>
            Operation not supported. For Solr updates use the SolrNet interfaces
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.Enumerable">
      <summary>
            Operation not supported. Please use <see cref="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.Enumerable``1" /> instead.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.Enumerable``1">
      <summary>
            Return the query results as an <see cref="T:System.Collections.Generic.IEnumerable`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
      <remarks>This is not a lazy IEnumerable</remarks>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.List">
      <summary>
            Operation not supported. Please use <see cref="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.List``1" /> instead.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.List(System.Collections.IList)">
      <summary>
            Operation not supported. Please use <see cref="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.List``1" /> instead.
            </summary>
      <param name="results">
      </param>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.List``1">
      <summary>
            Return the query results as an <see cref="T:System.Collections.Generic.List`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.SetMaxResults(System.Int32)">
      <summary>
            Set the maximum number of rows to retrieve.
            </summary>
      <param name="maxResults">The maximum number of rows to retreive</param>
      <returns>this</returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.SetFirstResult(System.Int32)">
      <summary>
            Sets the first row to retrieve.
            </summary>
      <param name="firstResult">The first row to retreive.</param>
      <returns>this</returns>
    </member>
    <member name="M:NHibernate.SolrNet.Impl.NHSolrQueryImpl.SetSort(NHibernate.Criterion.Order)">
      <summary>
            Sets sort order
            </summary>
      <param name="o">Sort order</param>
      <returns>this</returns>
    </member>
    <member name="P:NHibernate.SolrNet.Impl.NHSolrQueryImpl.LockModes">
      <summary>
            Null
            </summary>
    </member>
    <member name="T:NHibernate.SolrNet.Impl.SolrNetListener`1">
      <summary>
            NHibernate event listener for updating Solr index
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:NHibernate.SolrNet.Impl.SolrNetListener`1.Commit">
      <summary>
            Automatically commit Solr after each update
            </summary>
    </member>
    <member name="P:NHibernate.SolrNet.Impl.SolrNetListener`1.AddParameters">
      <summary>
            Gets or sets the parameters to use when adding a document to the index.
            </summary>
      <value>The parameters to use when adding a document to the index.</value>
    </member>
    <member name="T:NHibernate.SolrNet.SolrSession">
      <summary>
            NHibernate <see cref="T:NHibernate.ISession" /> with SolrNet extensions for querying
            </summary>
    </member>
    <member name="M:NHibernate.SolrNet.SolrSession.#ctor(NHibernate.ISession)">
      <summary>
            Creates a session using the current <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator" /></summary>
      <param name="session">NHibernate session to wrap</param>
      <remarks>The wrapped session is owned by this session. It will be disposed when this session is disposed</remarks>
    </member>
    <member name="M:NHibernate.SolrNet.SolrSession.#ctor(NHibernate.ISession,System.IServiceProvider)">
      <summary>
            Creates a session using a defined <see cref="T:System.IServiceProvider" /> to fetch SolrNet components
            </summary>
      <param name="session">NHibernate session to wrap</param>
      <param name="provider">Used to fetch SolrNet components</param>
      <remarks>The wrapped session is owned by this session. It will be disposed when this session is disposed</remarks>
    </member>
    <member name="M:NHibernate.SolrNet.SolrSession.CreateSolrQuery(System.String)">
      <summary>
            Creates a Solr query
            </summary>
      <param name="query">Solr query</param>
      <returns>query object</returns>
    </member>
    <member name="M:NHibernate.SolrNet.SolrSession.CreateSolrQuery(SolrNet.ISolrQuery)">
      <summary>
            Creates a Solr query
            </summary>
      <param name="query">Solr query</param>
      <returns>query object</returns>
    </member>
  </members>
</doc>